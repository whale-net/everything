module(
    name = "everything",
    version = "0.0.0",
)

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_python", version = "1.6.1")
bazel_dep(name = "rules_pycross", version = "0.8.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.39.1")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.4-rc1")
bazel_dep(name = "rules_helm", version = "0.6.0.bcr.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_java", version = "8.12.0")

# OCI/Docker setup - Ubuntu base image for all containers
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Ubuntu base - default base image for all containers (117MB)
# Uses Bazel's hermetic Python toolchain, so no Python installation needed in base image
oci.pull(
    name = "ubuntu_base",
    digest = "sha256:728785b59223d755e3e5c5af178fab1be7031f3522c5ccd7a0b32b80d8248123",
    image = "ubuntu:24.04",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/riscv64",
        "linux/s390x",
    ],
)
use_repo(oci, "ubuntu_base", "ubuntu_base_linux_amd64", "ubuntu_base_linux_arm64_v8", "ubuntu_base_linux_arm_v7", "ubuntu_base_linux_ppc64le", "ubuntu_base_linux_riscv64", "ubuntu_base_linux_s390x")

# CA certificates from Debian (architecture-independent .deb file)
http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")
http_file(
    name = "ca_certificates_deb",
    sha256 = "b2d488ad4d8d8adb3ba319fc9cb2cf9909fc42cb82ad239a26c570a2e749c389",
    urls = ["https://snapshot.debian.org/archive/debian/20231106T210201Z/pool/main/c/ca-certificates/ca-certificates_20210119_all.deb"],
)

# OpenAPI Generator CLI for client code generation
http_file(
    name = "openapi_generator_cli",
    sha256 = "615e014705af34861e789e0b2a11075d3c80db134f881e937265479a4a83996e",
    urls = ["https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.10.0/openapi-generator-cli-7.10.0.jar"],
    downloaded_file_path = "openapi-generator-cli.jar",
)

# SteamCMD for game server management
# SteamCMD is architecture-independent - it's a shell script that downloads
# the appropriate binaries on first run
http_file(
    name = "steamcmd_linux",
    sha256 = "cebf0046bfd08cf45da6bc094ae47aa39ebf4155e5ede41373b579b8f1071e7c",
    urls = ["https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz"],
)

# 32-bit libraries needed for SteamCMD (from Ubuntu 24.04)
# Downloaded at build time - not committed to repository
http_file(
    name = "lib32gcc_s1_deb",
    sha256 = "1ce0330ec5a978480f61864f9038214f8d8f6f5375c00b46f08a1af92fdd764c",
    urls = ["http://archive.ubuntu.com/ubuntu/pool/main/g/gcc-14/lib32gcc-s1_14.2.0-4ubuntu2~24.04_amd64.deb"],
)

http_file(
    name = "libc6_i386_deb",
    sha256 = "c1d612f7ce6f0effa0e7b75fd71b052842cea142fa0f64f5b7161a43464aa738",
    urls = ["http://archive.ubuntu.com/ubuntu/pool/main/g/glibc/libc6-i386_2.39-0ubuntu8.6_amd64.deb"],
)

# Python setup with rules_python for interpreter registration
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.13",
)
use_repo(python, "python_versions")

# Stripped Python builds from python-build-standalone for production containers
# These are optimized, production-ready builds (~20MB binary vs ~108MB debug)
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "python_stripped_x86_64",
    url = "https://github.com/astral-sh/python-build-standalone/releases/download/20251014/cpython-3.13.9%2B20251014-x86_64-unknown-linux-gnu-install_only_stripped.tar.gz",
    build_file_content = """
exports_files(["python"])
""",
)

http_archive(
    name = "python_stripped_arm64",
    url = "https://github.com/astral-sh/python-build-standalone/releases/download/20251014/cpython-3.13.9%2B20251014-aarch64-unknown-linux-gnu-install_only_stripped.tar.gz",
    build_file_content = """
exports_files(["python"])
""",
)

# Pycross setup for cross-platform Python dependency management
# Create environments for different platforms
environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "everything_pycross_envs",
    platforms = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
    ],
)
use_repo(environments, "everything_pycross_envs")

# Import dependencies from uv.lock
lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")
lock_import.import_uv(
    lock_file = "//:uv.lock",
    project_file = "//:pyproject.toml",
    repo = "pypi",
    target_environments = ["@everything_pycross_envs//:environments"],
)

# Create the package repositories
lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "pypi")

# Go setup

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.25.0")

# Go dependencies
go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")

go_deps.module(
    path = "github.com/coreos/go-oidc/v3",
    sum = "h1:M66zd0pcc5VxvBNM4pB331Wrsanby+QomQYjN8HamW8=",
    version = "v3.13.0",
)

go_deps.module(
    path = "github.com/gorilla/sessions",
    sum = "h1:lqzMYz6bOfvn2WriPUjNByzeXIlVzURcPmgMczkmTjY=",
    version = "v1.2.2",
)

go_deps.module(
    path = "golang.org/x/oauth2",
    sum = "h1:CrgCKl8PPAVtLnU3c+EDw6x11699EWlsDeWNWKdIOkc=",
    version = "v0.28.0",
)

go_deps.module(
    path = "golang.org/x/crypto",
    sum = "h1:AnAEvhDddvBdpY+uR+MyHmuZzzNqXSe/GvuDeob5L34=",
    version = "v0.36.0",
)

go_deps.module(
    path = "golang.org/x/net",
    sum = "h1:1zLorHbz+LYj7MQlSf1+2tPIIgibq2eL5xkrGk6f+2c=",
    version = "v0.37.0",
)

go_deps.module(
    path = "github.com/gorilla/securecookie",
    sum = "h1:YCIWL56dvtr73r6715mJs5ZvhtnY73hBvEF8kXD8ePA=",
    version = "v1.1.2",
)

go_deps.module(
    path = "github.com/stretchr/testify",
    sum = "h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=",
    version = "v1.9.0",
)

go_deps.module(
    path = "github.com/go-jose/go-jose/v4",
    sum = "h1:M6T8+mKZl/+fNNuFHvGIzDz7BTLQPIounk/b9dw3AaE=",
    version = "v4.0.5",
)

go_deps.module(
    path = "github.com/davecgh/go-spew",
    sum = "h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=",
    version = "v1.1.1",
)

go_deps.module(
    path = "github.com/pmezard/go-difflib",
    sum = "h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=",
    version = "v1.0.0",
)

go_deps.module(
    path = "gopkg.in/yaml.v3",
    sum = "h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=",
    version = "v3.0.1",
)

# OpenTelemetry dependencies for observability
go_deps.module(
    path = "go.opentelemetry.io/otel",
    sum = "h1:9l4+ROzaUHD3w5oo/VUDHLjKtgVxYzz/cAvOz/Qmjx0=",
    version = "v1.32.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/sdk",
    sum = "h1:OkjOqD5bM3rDN0zfH8Y3WCKBLuOPzbnPO6YfJqnVg0U=",
    version = "v1.32.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/trace",
    sum = "h1:+SZ0+wW0VX/5hxL4M4V7V+J3sIPpPNMh43h0fChvL3g=",
    version = "v1.32.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/log",
    sum = "h1:tqQFGFOxG+2Vb4p3Bh5sKTSxX9n3cAJJ9DQe6a9LdG4=",
    version = "v0.8.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/sdk/log",
    sum = "h1:xQ3HmxMdCqEDlz5TQpPRCu5ZF2jHJPL2c1/yMQkkS7E=",
    version = "v0.8.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploggrpc",
    sum = "h1:kVEZOeIe2sE+rRhpMBHQVIYL2xJPVY0L4ZJEEOz3WCs=",
    version = "v0.8.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/exporters/otlp/otlptrace",
    sum = "h1:8m7/R7s+mhgFaSJRZY5qF/hOcQwP2o4MaTq0Sm/XJGo=",
    version = "v1.32.0",
)

go_deps.module(
    path = "go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc",
    sum = "h1:5aL0PhRJuXDkWbLbOgZUz4B4QBpTBwX6W0u7R/E0fss=",
    version = "v1.32.0",
)

go_deps.module(
    path = "go.opentelemetry.io/proto/otlp",
    sum = "h1:Q3+wnQ11w4S+P5cJTp86xYLFOhH3JQW6TYqP2VFMN7M=",
    version = "v1.4.0",
)

go_deps.module(
    path = "google.golang.org/grpc",
    sum = "h1:OT9G0y6xFRUQOQRBLX6DxFGvhv+LXWamQ9TJZt5zmYA=",
    version = "v1.70.0",
)

go_deps.module(
    path = "google.golang.org/protobuf",
    sum = "h1:mtbLrKL6MqpWq8X5JqE7xFHkXTb8mKwYlscFJtOcx3o=",
    version = "v1.36.6",
)

use_repo(
    go_deps,
    "com_github_coreos_go_oidc_v3",
    "com_github_davecgh_go_spew",
    "com_github_go_jose_go_jose_v4",
    "com_github_gorilla_sessions",
    "com_github_gorilla_securecookie",
    "com_github_pmezard_go_difflib",
    "com_github_stretchr_testify",
    "in_gopkg_yaml_v3",
    "io_opentelemetry_go_otel",
    "io_opentelemetry_go_otel_exporters_otlp_otlplog_otlploggrpc",
    "io_opentelemetry_go_otel_exporters_otlp_otlptrace",
    "io_opentelemetry_go_otel_exporters_otlp_otlptrace_otlptracegrpc",
    "io_opentelemetry_go_otel_log",
    "io_opentelemetry_go_otel_sdk",
    "io_opentelemetry_go_otel_sdk_log",
    "io_opentelemetry_go_otel_trace",
    "io_opentelemetry_go_proto_otlp",
    "org_golang_x_crypto",
    "org_golang_x_net",
    "org_golang_x_oauth2",
    "org_golang_google_grpc",
    "org_golang_google_protobuf",
)
