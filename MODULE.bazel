module(
    name = "everything",
    version = "0.0.0",
)

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_python", version = "1.6.1")
bazel_dep(name = "rules_pycross", version = "0.8.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.39.1")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.4-rc1")
bazel_dep(name = "rules_helm", version = "0.6.0.bcr.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "1.0.0")

# bazel-diff for change detection
http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_file(
    name = "bazel_diff",
    urls = ["https://github.com/Tinder/bazel-diff/releases/download/11.0.0/bazel-diff_deploy.jar"],
    sha256 = "32af8a490b8fefeb5f67014c432a7bd459a34b09a2dffc3677160551c7c3fea2",
    downloaded_file_path = "bazel-diff.jar",
)

# OCI/Docker setup - Ubuntu base image for all containers
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Ubuntu base - default base image for all containers (117MB)
# Uses Bazel's hermetic Python toolchain, so no Python installation needed in base image
oci.pull(
    name = "ubuntu_base",
    digest = "sha256:728785b59223d755e3e5c5af178fab1be7031f3522c5ccd7a0b32b80d8248123",
    image = "ubuntu:24.04",
    platforms = [
        "linux/amd64",
        "linux/arm/v7",
        "linux/arm64/v8",
        "linux/ppc64le",
        "linux/riscv64",
        "linux/s390x",
    ],
)
use_repo(oci, "ubuntu_base", "ubuntu_base_linux_amd64", "ubuntu_base_linux_arm64_v8", "ubuntu_base_linux_arm_v7", "ubuntu_base_linux_ppc64le", "ubuntu_base_linux_riscv64", "ubuntu_base_linux_s390x")

# Python setup with rules_python for interpreter registration
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)
use_repo(python, "python_versions")

# Pycross setup for cross-platform Python dependency management
# Create environments for different platforms
environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "everything_pycross_envs",
    platforms = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
    ],
)
use_repo(environments, "everything_pycross_envs")

# Import dependencies from uv.lock
lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")
lock_import.import_uv(
    lock_file = "//:uv.lock",
    project_file = "//:pyproject.toml",
    repo = "pypi",
    target_environments = ["@everything_pycross_envs//:environments"],
)

# Create the package repositories
lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "pypi")

# Go setup

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.25.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
