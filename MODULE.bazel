module(
    name = "everything",
    version = "0.0.0",
)

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_python", version = "1.6.1")
bazel_dep(name = "rules_pycross", version = "0.8.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.39.1")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "rules_helm", version = "0.6.0.bcr.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "1.0.0")

# OCI/Docker setup - using proper base images for better compatibility
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Distroless Python - x86_64 only for simplified deployment
oci.pull(
    name = "distroless_python",
    # Using actual manifest list digest from gcr.io/distroless/python3-debian12:latest
    digest = "sha256:a0ded8676ed10e194cce1b8fdf9171672cda95ad1cabba4ece7b01f4db2e7471",
    image = "gcr.io/distroless/python3-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)

# Distroless Base - x86_64 and ARM64 for multi-platform deployment
oci.pull(
    name = "distroless_base",
    # Using actual manifest list digest from gcr.io/distroless/base-debian12:latest
    digest = "sha256:fa15492938650e1a5b87e34d47dc7d99a2b4e8aefd81b931b3f3eb6bb4c1d2f6",
    image = "gcr.io/distroless/base-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)

# Python base image with pip support for containers that need external dependencies
oci.pull(
    name = "python_base",
    image = "python:3.11-slim",
    platforms = [
        "linux/amd64",
        "linux/arm64/v8",
    ],
)
use_repo(oci, "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64_v8", "distroless_python", "distroless_python_linux_amd64", "distroless_python_linux_arm64_v8", "python_base", "python_base_linux_amd64", "python_base_linux_arm64_v8")

# Python setup with rules_python for interpreter registration
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.11",
)
use_repo(python, "python_versions")

# Pycross setup for cross-platform Python dependency management
# Create environments for different platforms
environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "everything_pycross_envs",
    platforms = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
    ],
)
use_repo(environments, "everything_pycross_envs")

# Import dependencies from uv.lock
lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")
lock_import.import_uv(
    lock_file = "//:uv.lock",
    project_file = "//:pyproject.toml",
    repo = "pypi",
    target_environments = ["@everything_pycross_envs//:environments"],
)

# Create the package repositories
lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "pypi")

# Go setup

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.25.0")

go_deps = use_extension("@gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
