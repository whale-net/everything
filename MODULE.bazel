module(
    name = "everything",
    version = "0.0.0",
)

bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "rules_python", version = "1.6.1")
bazel_dep(name = "rules_pycross", version = "0.8.0")
bazel_dep(name = "rules_go", version = "0.57.0")
bazel_dep(name = "gazelle", version = "0.39.1")
bazel_dep(name = "rules_oci", version = "2.2.6")
bazel_dep(name = "aspect_bazel_lib", version = "2.21.1")
bazel_dep(name = "aspect_rules_py", version = "1.6.4-rc1")
bazel_dep(name = "rules_helm", version = "0.6.0.bcr.1")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_java", version = "8.6.3")

# OCI/Docker setup - Distroless base image for all containers
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")

# Distroless base-debian12 - default base image for all containers (~25MB, down from 117MB)
# This image includes:
# - glibc and essential runtime libraries
# - SSL/TLS certificates (ca-certificates)
# - Busybox shell (/bin/sh) for entrypoint scripts
# - No package manager, minimal attack surface
# Uses Bazel's hermetic Python toolchain, so no Python installation needed in base image
oci.pull(
    name = "distroless_base",
    digest = "sha256:786007f631d22e8a1a5084c636fa3d8f0a851e441a52ab28d8d6c89d99f8d0d7",
    image = "gcr.io/distroless/base-debian12",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
use_repo(oci, "distroless_base")

# CA certificates from Debian (architecture-independent .deb file)
http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")
http_file(
    name = "ca_certificates_deb",
    sha256 = "b2d488ad4d8d8adb3ba319fc9cb2cf9909fc42cb82ad239a26c570a2e749c389",
    urls = ["https://snapshot.debian.org/archive/debian/20231106T210201Z/pool/main/c/ca-certificates/ca-certificates_20210119_all.deb"],
)

# OpenAPI Generator CLI for client code generation
http_file(
    name = "openapi_generator_cli",
    sha256 = "615e014705af34861e789e0b2a11075d3c80db134f881e937265479a4a83996e",
    urls = ["https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/7.10.0/openapi-generator-cli-7.10.0.jar"],
    downloaded_file_path = "openapi-generator-cli.jar",
)

# Python setup with rules_python for interpreter registration
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.13",
)
use_repo(python, "python_versions")

# Pycross setup for cross-platform Python dependency management
# Create environments for different platforms
environments = use_extension("@rules_pycross//pycross/extensions:environments.bzl", "environments")
environments.create_for_python_toolchains(
    name = "everything_pycross_envs",
    platforms = [
        "x86_64-unknown-linux-gnu",
        "aarch64-unknown-linux-gnu",
        "aarch64-apple-darwin",
    ],
)
use_repo(environments, "everything_pycross_envs")

# Import dependencies from uv.lock
lock_import = use_extension("@rules_pycross//pycross/extensions:lock_import.bzl", "lock_import")
lock_import.import_uv(
    lock_file = "//:uv.lock",
    project_file = "//:pyproject.toml",
    repo = "pypi",
    target_environments = ["@everything_pycross_envs//:environments"],
)

# Create the package repositories
lock_repos = use_extension("@rules_pycross//pycross/extensions:lock_repos.bzl", "lock_repos")
use_repo(lock_repos, "pypi")

# Go setup

go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(version = "1.25.0")
