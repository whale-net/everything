# Tools and shared build rules for the monorepo

package(default_visibility = ["//visibility:public"])

# Load platform definitions
load("//tools/bazel:platforms.bzl", "define_platforms")

define_platforms()

# Platform detection for release helper selection
config_setting(
    name = "on_macos_arm64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:arm64",
    ],
)

config_setting(
    name = "on_macos_x86_64",
    constraint_values = [
        "@platforms//os:macos",
        "@platforms//cpu:x86_64",
    ],
)

config_setting(
    name = "on_linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:arm64",
    ],
)

# Note: Both arm64 and aarch64 configs are provided for compatibility.
# Different Bazel configurations and toolchains may use either naming convention.
# Both point to the same ARM64 architecture to ensure the correct binary is selected.
config_setting(
    name = "on_linux_aarch64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)

config_setting(
    name = "on_linux_x86_64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# Convenient alias for release helper
# Uses the standard binary - no platform-specific targets needed
alias(
    name = "release",
    actual = "//tools/release_helper:release_helper",
    visibility = ["//visibility:public"],
)

# Alias for cross-compilation test (now in scripts/)
alias(
    name = "test_cross_compilation",
    actual = "//tools/scripts:test_cross_compilation",
    visibility = ["//visibility:public"],
)

# Alias for version resolver (now in scripts/)
alias(
    name = "version_resolver",
    actual = "//tools/scripts:version_resolver",
    visibility = ["//visibility:public"],
)

# Alias for openapi_gen_wrapper (now in openapi/)
alias(
    name = "openapi_gen_wrapper",
    actual = "//tools/openapi:openapi_gen_wrapper",
    visibility = ["//visibility:public"],
)
