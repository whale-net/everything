#!/usr/bin/env python3
"""
Tilt helper script for discovering and building Bazel-based container images.

This script integrates with the release_helper to:
1. Discover apps in the monorepo using Bazel queries
2. Build container images using Bazel rules
3. Generate Tiltfile configuration snippets
"""

import json
import os
import subprocess
import sys
from pathlib import Path
from typing import Dict, List, Optional


def find_workspace_root() -> Path:
    """Find the workspace root by looking for MODULE.bazel."""
    current = Path.cwd()
    while current != current.parent:
        if (current / "MODULE.bazel").exists():
            return current
        current = current.parent
    raise RuntimeError("Could not find workspace root (MODULE.bazel not found)")


def run_bazel(args: List[str], cwd: Optional[Path] = None) -> subprocess.CompletedProcess:
    """Run a bazel command and return the result."""
    cmd = ["bazel"] + args
    result = subprocess.run(
        cmd,
        cwd=cwd or find_workspace_root(),
        capture_output=True,
        text=True,
        check=False,
    )
    if result.returncode != 0:
        print(f"Error running bazel: {result.stderr}", file=sys.stderr)
        sys.exit(result.returncode)
    return result


def list_all_apps() -> List[Dict]:
    """List all apps with release metadata."""
    # Query for all metadata targets
    result = run_bazel(["query", "kind(app_metadata, //...)", "--output=label"])
    
    apps = []
    for line in result.stdout.strip().split('\n'):
        if line and '_metadata' in line:
            # Build the metadata to get the JSON
            run_bazel(["build", line])
            
            # Extract path from target
            target_parts = line[2:].split(":")
            if len(target_parts) != 2:
                continue
            
            package_path = target_parts[0]
            target_name = target_parts[1]
            
            # Read the metadata file
            workspace_root = find_workspace_root()
            metadata_file = workspace_root / f"bazel-bin/{package_path}/{target_name}_metadata.json"
            
            if metadata_file.exists():
                with open(metadata_file) as f:
                    metadata = json.load(f)
                    metadata['bazel_target'] = line
                    metadata['package_path'] = package_path
                    apps.append(metadata)
    
    return sorted(apps, key=lambda x: x['name'])


def generate_tilt_config(apps: List[Dict], output_file: Optional[str] = None) -> str:
    """Generate Tiltfile configuration for the given apps."""
    config_lines = [
        "# Auto-generated Tiltfile configuration",
        "# Generated by tools/scripts/tilt_helper.py",
        "",
    ]
    
    for app in apps:
        name = app['name']
        package_path = app['package_path']
        image_target = app.get('image_target', f"{name}_image")
        
        # Determine source directory to watch
        watch_path = f"./{package_path}"
        
        config_lines.extend([
            f"# {name}",
            f"bazel_build_image(",
            f"    '{name}',",
            f"    '{watch_path}',",
            f"    '//{package_path}:{image_target}_load',",
            f"    platform=platform",
            f")",
            "",
        ])
    
    config = "\n".join(config_lines)
    
    if output_file:
        with open(output_file, 'w') as f:
            f.write(config)
        print(f"Tiltfile configuration written to {output_file}")
    
    return config


def get_app_info(app_name: str) -> Optional[Dict]:
    """Get metadata for a specific app."""
    apps = list_all_apps()
    for app in apps:
        if app['name'] == app_name:
            return app
    return None


def build_app_for_tilt(app_name: str, platform: str = 'linux/arm64'):
    """Build an app's container image for Tilt."""
    app = get_app_info(app_name)
    if not app:
        print(f"Error: App '{app_name}' not found", file=sys.stderr)
        sys.exit(1)
    
    package_path = app['package_path']
    image_target = app.get('image_target', f"{app_name}_image")
    
    # Map platform to Bazel platform
    platform_map = {
        'linux/arm64': '//tools:linux_arm64',
        'linux/amd64': '//tools:linux_x86_64',
    }
    bazel_platform = platform_map.get(platform, '//tools:linux_arm64')
    
    # Build and load the image
    target = f"//{package_path}:{image_target}_load"
    print(f"Building {app_name} for {platform}...")
    print(f"Bazel target: {target}")
    print(f"Bazel platform: {bazel_platform}")
    
    result = run_bazel(["run", target, f"--platforms={bazel_platform}"])
    
    if result.returncode == 0:
        print(f"✅ Image loaded successfully: {app['image_repo_name']}:latest")
    else:
        print(f"❌ Failed to build image for {app_name}")
        sys.exit(1)


def main():
    """Main entry point."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Tilt helper for Bazel-based container images"
    )
    subparsers = parser.add_subparsers(dest='command', help='Command to run')
    
    # list command
    list_parser = subparsers.add_parser('list', help='List all apps')
    list_parser.add_argument('--json', action='store_true', help='Output as JSON')
    
    # generate command
    gen_parser = subparsers.add_parser('generate', help='Generate Tiltfile config')
    gen_parser.add_argument('-o', '--output', help='Output file')
    gen_parser.add_argument('--apps', help='Comma-separated list of apps (default: all)')
    
    # build command
    build_parser = subparsers.add_parser('build', help='Build an app for Tilt')
    build_parser.add_argument('app', help='App name to build')
    build_parser.add_argument('--platform', default='linux/arm64', 
                            choices=['linux/arm64', 'linux/amd64'],
                            help='Target platform')
    
    # info command
    info_parser = subparsers.add_parser('info', help='Get info about an app')
    info_parser.add_argument('app', help='App name')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        sys.exit(1)
    
    if args.command == 'list':
        apps = list_all_apps()
        if args.json:
            print(json.dumps(apps, indent=2))
        else:
            for app in apps:
                print(f"{app['name']:30} {app['domain']:15} {app['language']:10}")
    
    elif args.command == 'generate':
        apps = list_all_apps()
        if args.apps:
            app_names = [a.strip() for a in args.apps.split(',')]
            apps = [a for a in apps if a['name'] in app_names]
        generate_tilt_config(apps, args.output)
    
    elif args.command == 'build':
        build_app_for_tilt(args.app, args.platform)
    
    elif args.command == 'info':
        app = get_app_info(args.app)
        if app:
            print(json.dumps(app, indent=2))
        else:
            print(f"App '{args.app}' not found", file=sys.stderr)
            sys.exit(1)


if __name__ == '__main__':
    main()
