"""Helm chart release system for multi-app deployments."""

def _create_values_yaml_content(ctx, domain, apps, overrides):
    """Generate values.yaml content using actual metadata if available."""
    
    # Base structure
    values_content = """# Generated values.yaml for {domain} domain chart
# This file is automatically generated - do not edit manually

# Domain identifier
domain: {domain}

# Image configurations for each app
images:
""".format(domain = domain)

    # Add image configuration for each app
    for app_name in apps:
        registry = "ghcr.io"
        repo_name = "{}-{}".format(domain, app_name)
            
        values_content += """  {app_name}:
    name: "{registry}/whale-net/{repo_name}"
    tag: "latest"  # Will be resolved at build time
    repository: "{registry}/whale-net/{repo_name}"
""".format(app_name = app_name, registry = registry, repo_name = repo_name)

    # Add domain-specific app configuration
    values_content += """
# Domain-specific application configuration
{domain}:
  apps:
""".format(domain = domain)

    for app_name in apps:
        values_content += """    {app_name}:
      enabled: true
      version: "latest"  # Will be resolved at build time
      replicas: 1
      port: 8000
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"
""".format(app_name = app_name)

    # Add common configuration
    values_content += """
# Common configuration
domain: "{domain}"

service:
  enabled: true
  type: ClusterIP

ingress:
  enabled: false
  host: "localhost"
  tls:
    enabled: false

env:
  app_env: "dev"
""".format(domain = domain)

    # Add overrides as YAML comments for now
    if overrides:
        values_content += "\n# User overrides:\n"
        for key, value in overrides.items():
            values_content += "# {}: {}\n".format(key, value)

    return values_content

def _create_chart_yaml_content(chart_name, domain, chart_version, apps, description):
    """Generate Chart.yaml content as a string."""
    
    app_list = ", ".join(apps)
    chart_description = description or "Multi-app Helm chart for {domain} domain - includes {app_list}".format(
        domain = domain, app_list = app_list
    )
    
    return """apiVersion: v2
name: {chart_name}
description: {description}
type: application
version: {chart_version}
appVersion: "latest"
keywords:
  - {domain}
  - microservices
  - multi-app
home: https://github.com/whale-net/everything
sources:
  - https://github.com/whale-net/everything
maintainers:
  - name: whale-net
    url: https://github.com/whale-net/everything
""".format(
        chart_name = chart_name,
        description = chart_description,
        domain = domain,
        chart_version = chart_version
    )

def helm_chart_release_impl(ctx):
    """Implementation for helm_chart_release rule."""
    
    # Generate chart name using domain+name convention
    chart_name = "{}-{}".format(ctx.attr.domain, ctx.attr.name)
    
    # Create chart files
    chart_yaml = ctx.actions.declare_file("{}/Chart.yaml".format(chart_name))
    values_yaml = ctx.actions.declare_file("{}/values.yaml".format(chart_name))
    
    # Create template files in templates/ subdirectory
    deployment_yaml = ctx.actions.declare_file("{}/templates/deployment.yaml".format(chart_name))
    service_yaml = ctx.actions.declare_file("{}/templates/service.yaml".format(chart_name))
    helpers_tpl = ctx.actions.declare_file("{}/templates/_helpers.tpl".format(chart_name))
    
    # Generate Chart.yaml content
    chart_content = _create_chart_yaml_content(
        chart_name, 
        ctx.attr.domain, 
        ctx.attr.chart_version, 
        ctx.attr.apps,
        ctx.attr.description or ""
    )
    
    # Generate values.yaml content
    values_content = _create_values_yaml_content(
        ctx,
        ctx.attr.domain,
        ctx.attr.apps,
        ctx.attr.values_overrides
    )
    
    # Write the files
    ctx.actions.write(
        output = chart_yaml,
        content = chart_content
    )
    
    ctx.actions.write(
        output = values_yaml,
        content = values_content
    )
    
    # Copy template files
    template_files = []
    for template_file in ctx.files.templates:
        # Declare output file in templates subdirectory
        output_file = ctx.actions.declare_file("{}/templates/{}".format(chart_name, template_file.basename))
        
        # Copy template file to output
        ctx.actions.run_shell(
            inputs = [template_file],
            outputs = [output_file],
            command = "cp {} {}".format(template_file.path, output_file.path)
        )
        template_files.append(output_file)
    
    # Create a simple manifest file
    manifest_file = ctx.actions.declare_file("{}.manifest".format(chart_name))
    
    metadata_count = len(ctx.files.app_metadata_deps) if hasattr(ctx.files, 'app_metadata_deps') else 0
    template_count = len(template_files)
    
    manifest_content = """# Helm Chart Manifest for {chart_name}
Chart: {chart_name}
Domain: {domain}
Version: {version}
Apps: {apps}

Files generated:
- Chart.yaml
- values.yaml
- templates/ ({template_count} files)

Metadata files processed: {metadata_count}

Build success!
""".format(
        chart_name = chart_name,
        domain = ctx.attr.domain,
        version = ctx.attr.chart_version,
        apps = ", ".join(ctx.attr.apps),
        metadata_count = metadata_count,
        template_count = template_count
    )
    
    ctx.actions.write(
        output = manifest_file,
        content = manifest_content
    )
    
    all_files = [manifest_file, chart_yaml, values_yaml] + template_files
    
    return [DefaultInfo(
        files = depset(all_files),
        runfiles = ctx.runfiles(files = all_files)
    )]

helm_chart_release = rule(
    implementation = helm_chart_release_impl,
    attrs = {
        "domain": attr.string(
            mandatory = True,
            doc = "Domain name for the chart (e.g., 'manman', 'demo')"
        ),
        "apps": attr.string_list(
            mandatory = True,
            doc = "List of app names to include in the chart"
        ),
        "description": attr.string(
            doc = "Chart description"
        ),
        "chart_version": attr.string(
            default = "1.0.0",
            doc = "Helm chart version"
        ),
        "values_overrides": attr.string_dict(
            default = {},
            doc = "Dictionary of values to override in the generated values.yaml"
        ),
        "app_metadata_deps": attr.label_list(
            allow_files = True,
            doc = "App metadata files for version resolution (auto-populated)"
        ),
        "templates": attr.label_list(
            allow_files = True,
            default = ["//tools/templates:helm_templates"],
            doc = "Template files to include in the chart"
        ),
    },
    doc = """
    Create a Helm chart release with multi-app version management.
    
    This rule integrates with the existing release_app pattern to automatically
    resolve app versions and generate Helm charts with proper image references.
    
    Example:
        helm_chart_release(
            name = "host_chart",
            domain = "manman", 
            apps = ["experience_api", "status_api"],
            description = "ManMan host services",
            chart_version = "1.0.0",
        )
    """
)

def helm_chart_release_macro(domain, charts):
    """Convenience macro for defining multiple charts in a domain."""
    
    for chart_name, chart_config in charts.items():
        apps = chart_config["apps"]
        description = chart_config.get("description", "")
        version = chart_config.get("version", "1.0.0")
        custom_values = chart_config.get("custom_values", {})
        
        # Generate metadata dependency labels
        metadata_deps = []
        for app_name in apps:
            metadata_target = "//{domain}:{app}_metadata".format(domain = domain, app = app_name)
            metadata_deps.append(metadata_target)
        
        # Call the actual rule with metadata dependencies
        helm_chart_release(
            name = chart_name,
            domain = domain,
            apps = apps,
            description = description,
            chart_version = version,
            values_overrides = custom_values,
            app_metadata_deps = metadata_deps,
        )