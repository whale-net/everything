load("@rules_uv//uv:pip.bzl", "pip_compile")
#load("@gazelle//:def.bzl", "gazelle")
load("@rules_python//python:defs.bzl", "py_library")

# Export files needed by other packages
exports_files([
    "requirements.lock.txt",
    "requirements.linux.lock.txt",
    "requirements.linux.arm64.lock.txt",
    "requirements.linux.amd64.lock.txt",
])

# Python dependencies
pip_compile(
    name = "pip_compile",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.lock.txt",
)

# Linux ARM64-specific Python dependencies
pip_compile(
    name = "pip_compile_linux_arm64",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.linux.arm64.lock.txt",
    # Force ARM64 binary wheels to prevent cross-compilation issues
    extra_args = [
        "--only-binary=pydantic-core",
        "--only-binary=fastapi", 
        "--only-binary=uvicorn",
        "--only-binary=httptools",
        "--only-binary=uvloop",
        "--only-binary=websockets",
        "--python-platform=aarch64-unknown-linux-gnu",
    ],
)

# Linux AMD64-specific Python dependencies
pip_compile(
    name = "pip_compile_linux_amd64",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.linux.amd64.lock.txt",
    # Force AMD64 binary wheels to prevent cross-compilation issues
    extra_args = [
        "--only-binary=pydantic-core",
        "--only-binary=fastapi", 
        "--only-binary=uvicorn",
        "--only-binary=httptools",
        "--only-binary=uvloop",
        "--only-binary=websockets",
        "--python-platform=x86_64-unknown-linux-gnu",
    ],
)

# Legacy Linux requirements (for backwards compatibility)
pip_compile(
    name = "pip_compile_linux",
    requirements_in = "requirements.in",
    requirements_txt = "requirements.linux.lock.txt",
    # Allow binary wheels for key packages to prevent cross-compilation issues
    extra_args = [
        "--only-binary=pydantic-core",
        "--only-binary=fastapi", 
        "--only-binary=uvicorn",
        "--only-binary=httptools",
        "--only-binary=uvloop",
        "--only-binary=websockets",
    ],
)

# Root Python library
py_library(
    name = "root",
    srcs = ["__init__.py"],
    visibility = ["//visibility:public"],
)

# Go setup
# gazelle:prefix github.com/example/everything
# gazelle(name = "gazelle")

# gazelle(
#     name = "gazelle-update-repos",
#     args = [
#         "-from_file=go.mod",
#         "-to_macro=deps.bzl%go_dependencies",
#         "-prune",
#     ],
#     command = "update-repos",
# )

# Platform definitions
platform(
    name = "linux_amd64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

platform(
    name = "linux_arm64",
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:aarch64",
    ],
)