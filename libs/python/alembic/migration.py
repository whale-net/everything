"""Database migration utilities using Alembic.

Provides high-level functions for running, creating, and managing database migrations.
"""

import logging
from typing import Optional

import alembic.command
import alembic.config
from alembic.util import AutogenerateDiffsDetected
from sqlalchemy import Engine

logger = logging.getLogger(__name__)


def run_migration(engine: Engine, config: alembic.config.Config) -> None:
    """Run database migrations to head.

    Args:
        engine: SQLAlchemy engine
        config: Alembic configuration

    Example:
        >>> from sqlalchemy import create_engine
        >>> from libs.python.alembic import create_alembic_config, run_migration
        >>> engine = create_engine("postgresql://...")
        >>> config = create_alembic_config(migrations_dir, database_url)
        >>> run_migration(engine, config)
    """
    logger.info("Running database migrations to head")
    with engine.begin() as connection:
        config.attributes["connection"] = connection
        alembic.command.upgrade(config, "head")
    logger.info("Database migrations completed successfully")


def run_downgrade(
    engine: Engine, config: alembic.config.Config, revision: str
) -> None:
    """Downgrade database to a specific revision.

    Args:
        engine: SQLAlchemy engine
        config: Alembic configuration
        revision: Target revision (e.g., "-1" for previous, or specific revision hash)

    Example:
        >>> run_downgrade(engine, config, "-1")  # Downgrade one revision
        >>> run_downgrade(engine, config, "abc123")  # Downgrade to specific revision
    """
    logger.info(f"Downgrading database to revision: {revision}")
    with engine.begin() as connection:
        config.attributes["connection"] = connection
        alembic.command.downgrade(config, revision)
    logger.info("Database downgrade completed successfully")


def should_run_migration(engine: Engine, config: alembic.config.Config) -> bool:
    """Check if there are pending migrations.

    Args:
        engine: SQLAlchemy engine
        config: Alembic configuration

    Returns:
        True if migrations are needed, False otherwise

    Example:
        >>> if should_run_migration(engine, config):
        ...     run_migration(engine, config)
    """
    logger.debug("Checking if migrations are needed")
    with engine.begin() as connection:
        config.attributes["connection"] = connection
        try:
            alembic.command.check(config)
        except AutogenerateDiffsDetected:
            logger.info("Pending migrations detected")
            return True

    logger.debug("No pending migrations")
    return False


def create_migration(
    engine: Engine, config: alembic.config.Config, message: Optional[str] = None
) -> None:
    """Create a new migration based on model changes.

    Args:
        engine: SQLAlchemy engine
        config: Alembic configuration
        message: Optional message describing the migration

    Raises:
        RuntimeError: If no migration is needed

    Example:
        >>> create_migration(engine, config, "Add user_preferences table")
    """
    if not should_run_migration(engine, config):
        logger.warning("No migration required - no changes detected")
        raise RuntimeError("No migration required")

    logger.info(f"Creating new migration: {message or '(no message)'}")
    with engine.begin() as connection:
        config.attributes["connection"] = connection
        alembic.command.revision(config, message=message, autogenerate=True)
    logger.info("Migration created successfully")
