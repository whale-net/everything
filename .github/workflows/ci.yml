name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Build job - builds applications first
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
        
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: |
    #       bazel-bin/*/
    #       !bazel-bin/**/runfiles/
    #       !bazel-bin/**/*.runfiles/
    #       !bazel-bin/**/*_test*
    #       !bazel-bin/**/*.so
    #     retention-days: 3

  # Test job - runs tests after successful build
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
        
    - name: Run tests
      run: |
        # Use native Bazel test commands - Bazel will automatically use cached results
        # for tests whose transitive dependencies have not changed
        # 
        # Caching Strategy:
        # - Bazel automatically caches build artifacts and test results
        # - Cache hits are indicated by "cache hit" messages in the build log
        # - Test results are cached based on source file hashes and dependencies
        # - Monitor cache effectiveness by looking for cache hit messages
        bazel test //...
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Docker job - builds container images using the release tool
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
      
    # Log in to GitHub Container Registry using GITHUB_TOKEN
    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker images using release tool
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Use the release tool to build images consistently
        echo "Building Docker images using release tool..."
        
        # Get list of all apps
        APPS=$(bazel run //tools:release -- list)
        echo "Apps to build: $APPS"
        
        # Build images for all apps using the release tool
        for app in $APPS; do
          echo "Building image for $app..."
          bazel run //tools:release -- build "$app"
        done
        
        # Show loaded Docker images
        echo "Built Docker images:"
        docker images
        
    - name: Push images to registry (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Use the release planning function to determine which apps have changed
        echo "Detecting changed apps using release planning..."
        
        # Detect changed apps since the last tag
        CHANGED_APPS=$(bazel run //tools:release -- changes)
        
        if [ -z "$CHANGED_APPS" ]; then
          echo "No apps detected as changed. Skipping image push."
          exit 0
        fi
        
        echo "Changed apps: $CHANGED_APPS"
        
        # Publish images only for changed apps using the release tool
        for app in $CHANGED_APPS; do
          echo "Publishing $app with latest and commit tags..."
          bazel run //tools:release -- release "$app" --version "latest" --commit "${{ github.sha }}" --create-git-tag
        done
        
    - name: Save Docker images as artifacts (PR builds)
      if: github.event_name == 'pull_request'
      run: |
        # Save images for PR builds
        mkdir -p docker-images
        APPS=$(bazel run //tools:release -- list)
        
        for app in $APPS; do
          echo "Saving image for $app..."
          safe_name="${app}_latest"
          docker save "${app}:latest" | gzip > "docker-images/${safe_name}.tar.gz"
        done
        
    - name: Upload Docker images (PR builds)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: docker-images/
        retention-days: 3
