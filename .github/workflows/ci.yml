name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Test job - builds and tests in one step for better cache utilization
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'test'
        
    - name: Run tests
      run: |
        # Run all tests and let Bazel handle caching
        bazel test //...
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Plan Docker builds - determine which apps need building
  plan-docker:
    name: Plan Docker Builds
    runs-on: ubuntu-latest
    needs: test
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}
      apps: ${{ steps.plan.outputs.apps }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'plan'
        
    - name: Plan Docker builds using release tool
      id: plan
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Determine what to build based on changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against the base branch
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          echo "PR detected: comparing against base commit $BASE_COMMIT"
          EVENT_TYPE="pull_request"
        elif [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.event.before }}" ]; then
          # For pushes, compare against the previous commit
          BASE_COMMIT="${{ github.event.before }}"
          echo "Push detected: comparing against previous commit $BASE_COMMIT"
          EVENT_TYPE="push"
        else
          # Fallback: build all apps
          echo "Cannot determine base commit, building all apps"
          BASE_COMMIT=""
          EVENT_TYPE="fallback"
        fi
        
        # Use release helper to plan the Docker builds
        echo "Planning Docker builds using release tool..."
        PLAN_OUTPUT=$(bazel run //tools:release -- plan \
          --event-type "$EVENT_TYPE" \
          --base-commit="$BASE_COMMIT" \
          --format github)
        
        # Parse output from release helper
        echo "$PLAN_OUTPUT" | while IFS= read -r line; do
          if [[ "$line" == matrix=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
          elif [[ "$line" == apps=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
            APPS_LIST="${line#apps=}"
            if [[ -n "$APPS_LIST" ]]; then
              echo "Apps to build: $APPS_LIST"
            else
              echo "No apps to build"
            fi
          fi
        done

  # Docker job - builds container images using the release tool
  docker:
    name: Build ${{ matrix.app }} Image
    runs-on: ubuntu-latest
    needs: plan-docker
    if: needs.plan-docker.outputs.matrix != '' && fromJson(needs.plan-docker.outputs.matrix).include[0] != null
    strategy:
      matrix: ${{ fromJson(needs.plan-docker.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
        cache-suffix: 'docker'
      
    # Log in to GitHub Container Registry using GITHUB_TOKEN
    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker image for ${{ matrix.app }}
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        APP: ${{ matrix.app }}
      run: |
        # Build Docker image for the specific app from the matrix
        echo "Building Docker image for $APP using release tool..."
        bazel run //tools:release -- build "$APP"
        
        # Show the built Docker image
        echo "Built Docker image for $APP:"
        docker images | grep -E "(REPOSITORY|$APP)" || docker images | head -5
        
    - name: Push image to registry (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        APP: ${{ matrix.app }}
      run: |
        # Publish the specific app image to registry
        echo "Publishing $APP image to registry..."
        bazel run //tools:release -- release "$APP" --version "latest" --commit "${{ github.sha }}" --create-git-tag
        
