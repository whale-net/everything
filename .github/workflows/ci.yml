name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Test job - builds and tests in one step for better cache utilization
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'test'
        bazel-remote-cache-url: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        bazel-remote-cache-user: ${{ secrets.BAZEL_REMOTE_CACHE_USER }}
        bazel-remote-cache-password: ${{ secrets.BAZEL_REMOTE_CACHE_PASSWORD }}
        
    - name: Run tests
      run: |
        # Determine what to test based on changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against the base branch
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          echo "PR detected: comparing against base commit $BASE_COMMIT"
        elif [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.event.before }}" ]; then
          # For pushes, compare against the previous commit
          BASE_COMMIT="${{ github.event.before }}"
          echo "Push detected: comparing against previous commit $BASE_COMMIT"
        else
          # Fallback: test everything
          echo "Cannot determine base commit, running all tests"
          BASE_COMMIT=""
        fi
        
        if [ -n "$BASE_COMMIT" ]; then
          # Use release helper to detect which tests need to run
          echo "Detecting affected tests using Bazel dependency analysis..."
          AFFECTED_TESTS=$(bazel run //tools:release -- tests --base-commit="$BASE_COMMIT" --use-bazel-query 2>/dev/null || echo "")
          
          if [ -n "$AFFECTED_TESTS" ]; then
            echo "Running affected tests:"
            echo "$AFFECTED_TESTS"
            echo "$AFFECTED_TESTS" | while read -r test_target; do
              if [ -n "$test_target" ]; then
                echo "Running test: $test_target"
                bazel test "$test_target"
              fi
            done
          else
            echo "No tests affected by changes - skipping test execution"
          fi
        else
          # Fallback to running all tests
          echo "Running all tests as fallback"
          bazel test //...
        fi
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Plan Docker builds - determine which apps need building
  plan-docker:
    name: Plan Docker Builds
    runs-on: ubuntu-latest
    needs: test
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}
      apps: ${{ steps.plan.outputs.apps }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'plan'
        bazel-remote-cache-url: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        bazel-remote-cache-user: ${{ secrets.BAZEL_REMOTE_CACHE_USER }}
        bazel-remote-cache-password: ${{ secrets.BAZEL_REMOTE_CACHE_PASSWORD }}
        
    - name: Plan Docker builds using release tool
      id: plan
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Determine what to build based on changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against the base branch
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          echo "PR detected: comparing against base commit $BASE_COMMIT"
          EVENT_TYPE="pull_request"
        elif [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.event.before }}" ]; then
          # For pushes, compare against the previous commit
          BASE_COMMIT="${{ github.event.before }}"
          echo "Push detected: comparing against previous commit $BASE_COMMIT"
          EVENT_TYPE="push"
        else
          # Fallback: build all apps
          echo "Cannot determine base commit, building all apps"
          BASE_COMMIT=""
          EVENT_TYPE="fallback"
        fi
        
        # Use release helper to plan the Docker builds
        echo "Planning Docker builds using release tool..."
        PLAN_OUTPUT=$(bazel run //tools:release -- plan \
          --event-type "$EVENT_TYPE" \
          --base-commit="$BASE_COMMIT" \
          --format github)
        
        # Parse output from release helper and set GitHub outputs
        # Use process substitution to avoid subshell issues with pipes
        while IFS= read -r line; do
          if [[ "$line" == matrix=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
          elif [[ "$line" == apps=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
            APPS_LIST="${line#apps=}"
            if [[ -n "$APPS_LIST" ]]; then
              echo "Apps to build: $APPS_LIST"
            else
              echo "No apps to build"
            fi
          fi
        done <<< "$PLAN_OUTPUT"

  # Docker job - builds container images using the release tool
  docker:
    name: Build ${{ matrix.app }} Image
    runs-on: ubuntu-latest
    needs: plan-docker
    if: needs.plan-docker.outputs.apps != '' && needs.plan-docker.outputs.apps != null
    strategy:
      matrix: ${{ fromJson(needs.plan-docker.outputs.matrix) }}
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
        cache-suffix: 'docker'
        bazel-remote-cache-url: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        bazel-remote-cache-user: ${{ secrets.BAZEL_REMOTE_CACHE_USER }}
        bazel-remote-cache-password: ${{ secrets.BAZEL_REMOTE_CACHE_PASSWORD }}
      
    # Log in to GitHub Container Registry using GITHUB_TOKEN
    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker image for ${{ matrix.app }}
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        APP: ${{ matrix.app }}
      run: |
        # Build Docker image for the specific app from the matrix
        echo "Building Docker image for $APP using release tool..."
        bazel run //tools:release -- build "$APP"
        
        # Show the built Docker image
        echo "Built Docker image for $APP:"
        docker images | grep -E "(REPOSITORY|$APP)" || docker images | head -5
        
    - name: Push image to registry (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        APP: ${{ matrix.app }}
      run: |
        # Publish the specific app image to registry
        echo "Publishing $APP image to registry..."
        bazel run //tools:release -- release "$APP" --version "latest" --commit "${{ github.sha }}"
        
  # Build summary - collects status of all matrix jobs for branch protection
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [plan-docker, docker]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'summary'
        bazel-remote-cache-url: ${{ secrets.BAZEL_REMOTE_CACHE_URL }}
        bazel-remote-cache-user: ${{ secrets.BAZEL_REMOTE_CACHE_USER }}
        bazel-remote-cache-password: ${{ secrets.BAZEL_REMOTE_CACHE_PASSWORD }}
      
    - name: Collect build results and generate summary
      run: |
        echo "=== CI Build Summary ===" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if any apps were planned for building
        PLANNED_APPS="${{ needs.plan-docker.outputs.apps }}"
        if [[ -z "$PLANNED_APPS" || "$PLANNED_APPS" == "null" ]]; then
          echo "✅ **No apps required building** - all changes were in non-app areas" >> $GITHUB_STEP_SUMMARY
          echo "Build status: **PASSED** (no builds needed)" >> $GITHUB_STEP_SUMMARY
          echo "No apps needed building - this is expected for documentation or infrastructure-only changes"
          exit 0
        fi
        
        echo "**Apps processed:** $PLANNED_APPS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check the status of the matrix docker job
        DOCKER_JOB_RESULT="${{ needs.docker.result }}"
        PLAN_JOB_RESULT="${{ needs.plan-docker.result }}"
        
        echo "**Job Results:**" >> $GITHUB_STEP_SUMMARY
        echo "- Planning: $PLAN_JOB_RESULT" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Builds: $DOCKER_JOB_RESULT" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Determine overall status
        if [[ "$PLAN_JOB_RESULT" == "success" && "$DOCKER_JOB_RESULT" == "success" ]]; then
          echo "✅ **Overall Status: PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "All Docker builds completed successfully"
          exit 0
        elif [[ "$DOCKER_JOB_RESULT" == "skipped" ]]; then
          echo "⚠️ **Overall Status: PASSED** (builds skipped - no changes detected)" >> $GITHUB_STEP_SUMMARY
          echo "Docker builds were skipped - no apps needed building"
          exit 0
        else
          echo "❌ **Overall Status: FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "One or more Docker builds failed"
          echo "::error::Docker build pipeline failed"
          exit 1
        fi
        
