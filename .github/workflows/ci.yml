name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Test job - builds and tests in one step for better cache utilization
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'test'
        
    - name: Run tests
      run: |
        # Run all tests and let Bazel handle caching
        bazel test //...
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Docker job - builds container images using the release tool
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
        cache-suffix: 'docker'
      
    # Log in to GitHub Container Registry using GITHUB_TOKEN
    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker images using release tool
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Build only Docker images for changed apps
        echo "Building Docker images for changed apps using release tool..."
        
        # Determine what to build based on changes
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, compare against the base branch
          BASE_COMMIT="${{ github.event.pull_request.base.sha }}"
          echo "PR detected: comparing against base commit $BASE_COMMIT"
        elif [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.event.before }}" ]; then
          # For pushes, compare against the previous commit
          BASE_COMMIT="${{ github.event.before }}"
          echo "Push detected: comparing against previous commit $BASE_COMMIT"
        else
          # Fallback: build all apps
          echo "Cannot determine base commit, building all apps"
          BASE_COMMIT=""
        fi
        
        # Get list of apps to build
        if [ -n "$BASE_COMMIT" ]; then
          echo "Detecting changed apps using Bazel dependency analysis..."
          APPS=$(bazel run //tools:release -- changes --base-commit="$BASE_COMMIT" --use-bazel-query)
        else
          echo "Building all apps..."
          APPS=$(bazel run //tools:release -- list-apps | awk '{print $1}')
        fi
        
        if [ -z "$APPS" ]; then
          echo "No apps to build"
          exit 0
        fi
        
        echo "Apps to build: $APPS"
        
        # Build images for affected apps using the release tool
        for app in $APPS; do
          echo "Building image for $app..."
          bazel run //tools:release -- build "$app"
        done
        
        # Show loaded Docker images
        echo "Built Docker images:"
        docker images
        
    - name: Push images to registry (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Publish only changed apps for efficiency
        echo "Publishing changed apps..."
        
        # Use the same change detection logic for consistency
        echo "Detecting changed apps for publishing..."
        
        # Use the same base commit detection as the build step
        if [ -n "${{ github.event.before }}" ]; then
          BASE_COMMIT="${{ github.event.before }}"
          echo "Comparing HEAD to previous commit: $BASE_COMMIT"
          CHANGED_APPS=$(bazel run //tools:release -- changes --base-commit="$BASE_COMMIT" --use-bazel-query)
        else
          echo "Cannot determine base commit, publishing all apps"
          CHANGED_APPS=$(bazel run //tools:release -- list-apps | awk '{print $1}')
        fi
        
        if [ -z "$CHANGED_APPS" ]; then
          echo "No apps detected as changed. Skipping image push."
          exit 0
        fi
        
        echo "Apps to publish: $CHANGED_APPS"
        
        # Publish images only for changed apps using the release tool
        for app in $CHANGED_APPS; do
          echo "Publishing $app with latest and commit tags..."
          bazel run //tools:release -- release "$app" --version "latest" --commit "${{ github.sha }}" --create-git-tag
        done
        
