name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Build job - builds applications first
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        python-version: '3.11'
        go-version: '1.25'
        setup-docker: 'true'
        
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: |
    #       bazel-bin/*/
    #       !bazel-bin/**/runfiles/
    #       !bazel-bin/**/*.runfiles/
    #       !bazel-bin/**/*_test*
    #       !bazel-bin/**/*.so
    #     retention-days: 3

  # Test job - runs tests after successful build
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        python-version: '3.11'
        go-version: '1.25'
        
    - name: Run tests
      run: |
        # Use native Bazel test commands with CI configuration - Bazel will automatically use cached results
        # for tests whose transitive dependencies have not changed
        bazel test --config=ci //...
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Docker job - builds container images using the release tool
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    # This implements the multi-layered caching architecture from the design document
    - name: Setup Bazel with Multi-Layered Caching
      uses: bazel-contrib/setup-bazel@0.15.0
      with:
        # Layer 1: Enable global caching for Bazel binaries and dependencies.
        bazelisk-cache: true
        repository-cache: true

        # Layer 2: Enable unified disk cache for all build artifacts.
        # Using "monorepo" as the namespace for the entire repository.
        disk-cache: "monorepo"
        
        # Injects the content of the CI-specific .bazelrc file into the
        # user configuration. We import the CI config but let bazel commands
        # explicitly specify --config=ci to avoid duplication.
        bazelrc: |
          import %workspace%/.github/.bazelrc.ci
      id: bazel-cache
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Setup Go with caching
      uses: ./.github/actions/setup-go-cache
      with:
        go-version: '1.25'  # Match MODULE.bazel version
        
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Initialize Go cache
      run: |
        # Initialize Go cache directories using Bazel tool
        bazel run //:init-go-cache
      
    # Log in to GitHub Container Registry using GITHUB_TOKEN
    - name: Log in to GitHub Container Registry
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build Docker images using release tool
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Use the release tool to build images consistently
        echo "Building Docker images using release tool..."
        
        # Get list of all apps
        APPS=$(bazel run //tools:release --config=ci -- list)
        echo "Apps to build: $APPS"
        
        # Build images for all apps using the release tool
        for app in $APPS; do
          echo "Building image for $app..."
          bazel run //tools:release --config=ci -- build "$app"
        done
        
        # Show loaded Docker images
        echo "Built Docker images:"
        docker images
        
    - name: Push images to registry (main branch only)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        # Use the release tool to publish images with latest and commit tags
        echo "Publishing Docker images using release tool..."
        
        # Get list of all apps
        APPS=$(bazel run //tools:release --config=ci -- list)
        
        # Publish images for all apps using the release tool
        for app in $APPS; do
          echo "Publishing $app with latest and commit tags..."
          bazel run //tools:release --config=ci -- release "$app" --version "latest" --commit "${{ github.sha }}"
        done
        
    - name: Save Docker images as artifacts (PR builds)
      if: github.event_name == 'pull_request'
      run: |
        # Save images for PR builds
        mkdir -p docker-images
        APPS=$(bazel run //tools:release --config=ci -- list)
        
        for app in $APPS; do
          echo "Saving image for $app..."
          safe_name="${app}_latest"
          docker save "${app}:latest" | gzip > "docker-images/${safe_name}.tar.gz"
        done
        
    - name: Upload Docker images (PR builds)
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: docker-images/
        retention-days: 3
