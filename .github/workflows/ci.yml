name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  # Build job - builds applications first
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Bazelisk
      uses: bazelbuild/setup-bazelisk@v3
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Mount Bazel cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-build-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'MODULE.bazel', 'go.mod', 'requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-bazel-build-
          ${{ runner.os }}-bazel-
          
    - name: Build applications
      run: |
        # Build all binary targets (not libraries or tests)
        bazel query "kind('.*_binary', //...)" | xargs bazel build
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          bazel-bin/*/
          !bazel-bin/**/runfiles/
          !bazel-bin/**/*.runfiles/
          !bazel-bin/**/*_test*
          !bazel-bin/**/*.so
        retention-days: 3

  # Test job - runs tests after successful build
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Bazelisk
      uses: bazelbuild/setup-bazelisk@v3
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Mount Bazel cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-test-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'MODULE.bazel', 'go.mod', 'requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-bazel-test-
          ${{ runner.os }}-bazel-
          
    - name: Run tests
      run: |
        # Bazel automatically handles incremental testing
        # Only rebuilds and retests what's affected by changes
        bazel test --config=ci //...
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: bazel-testlogs/
        retention-days: 7

  # Docker job - builds container images using Bazel OCI rules
  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test  # Changed from build to test since we build everything in this job
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bazelisk
      uses: bazelbuild/setup-bazelisk@v3
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        
    - name: Mount Bazel cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/bazel
          ~/.cache/bazelisk
        key: ${{ runner.os }}-bazel-docker-${{ hashFiles('**/BUILD.bazel', '**/*.bzl', 'MODULE.bazel', 'go.mod', 'requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-bazel-docker-
          ${{ runner.os }}-bazel-
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub (optional)
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.DOCKER_USERNAME != ''
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        
    - name: Build and load Docker images with Bazel
      run: |
        # Build all OCI images using Bazel
        # Target Linux AMD64 platform for containers
        bazel build --platforms=@rules_go//go/toolchain:linux_amd64 \
          $(bazel query "kind('oci_load', //...)")
        
        # Load images into Docker daemon
        for tarball in $(bazel query --output=files "kind('oci_load', //...)" | grep -E '\.sh$'); do
          if [[ -f "$tarball" ]]; then
            echo "Loading image from $tarball"
            "$tarball"
          fi
        done
        
        # Tag and push images if on main branch
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
          if [[ -n "${{ secrets.DOCKER_USERNAME }}" ]]; then
            # Get all loaded images and tag/push them
            for image in $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | grep -v "<none>"); do
              if [[ "$image" != *"/"* ]]; then  # Skip images that already have a registry prefix
                registry_image="${{ secrets.DOCKER_USERNAME }}/$image"
                commit_image="${{ secrets.DOCKER_USERNAME }}/${image%:*}:${{ github.sha }}"
                
                echo "Tagging and pushing $image as $registry_image and $commit_image"
                docker tag "$image" "$registry_image"
                docker tag "$image" "$commit_image"
                docker push "$registry_image"
                docker push "$commit_image"
              fi
            done
          fi
        fi
        
    - name: Save Docker images as artifacts
      if: github.event_name == 'pull_request'
      run: |
        # Save images for PR builds
        mkdir -p docker-images
        for image in $(docker images --format "table {{.Repository}}:{{.Tag}}" | grep -v REPOSITORY | grep -v "<none>"); do
          if [[ "$image" != *"/"* ]]; then  # Skip images that already have a registry prefix
            safe_name=$(echo "$image" | tr ':/' '_')
            echo "Saving image $image as docker-images/${safe_name}.tar.gz"
            docker save "$image" | gzip > "docker-images/${safe_name}.tar.gz"
          fi
        done
        
    - name: Upload Docker images
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: docker-images
        path: docker-images/
        retention-days: 3
