name: Release

on:
  workflow_dispatch:
    inputs:
      apps:
        description: 'Comma-separated list of apps to release (e.g., hello_python,hello_go) or "all" for all apps'
        required: true
        default: 'all'
      version:
        description: 'Release version (e.g., v1.0.0) - leave empty when using increment options'
        required: false
      increment_minor:
        description: 'Auto-increment minor version (resets patch to 0)'
        type: boolean
        default: false
      increment_patch:
        description: 'Auto-increment patch version'
        type: boolean
        default: false
      dry_run:
        description: 'Dry run - build but do not publish'
        type: boolean
        default: false

jobs:
  # Validate inputs and ensure mutual exclusivity
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    steps:
    - name: Validate mutually exclusive version options
      run: |
        VERSION="${{ github.event.inputs.version }}"
        INCREMENT_MINOR="${{ github.event.inputs.increment_minor }}"
        INCREMENT_PATCH="${{ github.event.inputs.increment_patch }}"
        
        # Count how many version options are set
        OPTION_COUNT=0
        if [[ -n "$VERSION" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        if [[ "$INCREMENT_MINOR" == "true" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        if [[ "$INCREMENT_PATCH" == "true" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        
        # Ensure exactly one option is set
        if [[ $OPTION_COUNT -eq 0 ]]; then
          echo "Error: Must specify exactly one of: version, increment_minor, or increment_patch"
          exit 1
        elif [[ $OPTION_COUNT -gt 1 ]]; then
          echo "Error: version, increment_minor, and increment_patch are mutually exclusive. Specify only one."
          exit 1
        fi
        
        echo "Input validation passed"

  # Detect what apps have changed and build release plan
  plan-release:
    name: Plan Release
    runs-on: ubuntu-latest
    needs: validate-inputs
    outputs:
      release-matrix: ${{ steps.plan.outputs.matrix }}
      version: ${{ steps.plan.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'docker'
        
    - name: Plan release using release helper tool
      id: plan
      run: |
        # Determine version mode and build command
        VERSION="${{ github.event.inputs.version }}"
        INCREMENT_MINOR="${{ github.event.inputs.increment_minor }}"
        INCREMENT_PATCH="${{ github.event.inputs.increment_patch }}"
        EVENT_TYPE="workflow_dispatch"
        APPS_INPUT="${{ github.event.inputs.apps }}"
        
        # Build the command based on the selected option
        CMD="bazel run --config=ci //tools:release -- plan --event-type \"$EVENT_TYPE\" --apps \"$APPS_INPUT\" --format github"
        
        if [[ -n "$VERSION" ]]; then
          CMD="$CMD --version \"$VERSION\""
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        elif [[ "$INCREMENT_MINOR" == "true" ]]; then
          CMD="$CMD --increment-minor"
          echo "Planning minor version increment"
        elif [[ "$INCREMENT_PATCH" == "true" ]]; then
          CMD="$CMD --increment-patch"
          echo "Planning patch version increment"
        fi
        
        # Use release helper to plan the release
        echo "Planning release with command: $CMD"
        PLAN_OUTPUT=$(eval $CMD)
        
        # Parse output from release helper
        echo "$PLAN_OUTPUT" | while IFS= read -r line; do
          if [[ "$line" == matrix=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
          elif [[ "$line" == apps=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
            APPS_LIST="${line#apps=}"
            if [[ -n "$APPS_LIST" ]]; then
              echo "Release plan: $APPS_LIST"
            else
              echo "No apps to release"
            fi
          fi
        done

  # Build and release selected apps
  release:
    name: Release ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.release-matrix != '' && fromJson(needs.plan-release.outputs.release-matrix).include[0] != null
    strategy:
      matrix: ${{ fromJson(needs.plan-release.outputs.release-matrix) }}
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
        cache-suffix: 'docker'
        
    # Configure Git for tagging
    - name: Configure Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        
    # Login unless it's a manual dispatch with dry_run=true
    # - Manual dispatch with dry_run=false: login (needed for publishing)
    # - Manual dispatch with dry_run=true: skip login (no publishing)
    # NOTE: GHCR_PAT secret should be created with write:packages and read:packages scopes
    # Falls back to GITHUB_TOKEN if GHCR_PAT is not available (limited permissions)
    - name: Log in to GitHub Container Registry
      if: ${{ github.event.inputs.dry_run == 'false' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
        
    - name: Build and release app using consolidated release helper
      env:
        APP: ${{ matrix.app }}
        VERSION: ${{ matrix.version || needs.plan-release.outputs.version }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        echo "Building and releasing $APP version $VERSION using consolidated release system"
        
        # Use our release helper tool to handle the entire release process
        if [[ "$DRY_RUN" == "true" ]]; then
          echo "DRY RUN: Building and testing release process without publishing"
          bazel run --config=ci //tools:release -- release "$APP" --version "$VERSION" --commit "${{ github.sha }}" --dry-run --create-git-tag
        else
          echo "Building and publishing $APP $VERSION"
          bazel run --config=ci //tools:release -- release "$APP" --version "$VERSION" --commit "${{ github.sha }}" --create-git-tag
          echo "Successfully released $APP $VERSION"
        fi

    - name: Generate release notes for app
      if: ${{ github.event.inputs.dry_run == 'false' }}
      env:
        APP: ${{ matrix.app }}
        VERSION: ${{ matrix.version || needs.plan-release.outputs.version }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        echo "Generating release notes for $APP version $VERSION"
        
        # Get app metadata to determine domain for tag format
        METADATA=$(bazel run --config=ci //tools:release -- list-apps | grep "^$APP " | head -n1)
        if [[ -n "$METADATA" ]]; then
          DOMAIN=$(echo "$METADATA" | sed 's/.*domain: \([^,]*\).*/\1/')
          TAG_NAME="${DOMAIN}-${APP}.${VERSION}"
          
          echo "## 📝 Release Notes for $TAG_NAME" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Generate release notes using the release helper
          RELEASE_NOTES=$(bazel run --config=ci //tools:release -- release-notes "$APP" \
            --current-tag "$TAG_NAME" \
            --format markdown 2>/dev/null || echo "Release notes generation skipped - no previous tags found")
          
          echo "Release notes generated for $APP:"
          echo "$RELEASE_NOTES"
          
          # Add to GitHub step summary
          echo "$RELEASE_NOTES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ Release notes generated for $APP $VERSION"
        else
          echo "Warning: Could not determine domain for $APP, skipping release notes"
        fi

  create-github-releases:
    name: Create GitHub Releases
    runs-on: ubuntu-latest
    needs: [plan-release, release]
    if: needs.plan-release.outputs.release-matrix != '' && fromJson(needs.plan-release.outputs.release-matrix).include[0] != null && github.event.inputs.dry_run == 'false'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'docker'
      
    - name: Create GitHub releases for individual apps
      env:
        MATRIX: ${{ needs.plan-release.outputs.release-matrix }}
        VERSION: ${{ needs.plan-release.outputs.version }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
    - name: Create GitHub releases for all apps
      env:
        MATRIX: ${{ needs.plan-release.outputs.release-matrix }}
        VERSION: ${{ needs.plan-release.outputs.version }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        echo "Creating GitHub releases for all apps in version $VERSION..."
        
        # Extract app names from matrix
        APPS=$(echo "$MATRIX" | jq -r '.include[].app' | tr '\n' ',' | sed 's/,$//')
        
        if [[ -n "$APPS" && "$APPS" != "" ]]; then
          echo "Creating releases for apps: $APPS"
          
          # Create releases for all apps at once
          if bazel run --config=ci //tools:release -- create-combined-github-release "$VERSION" \
            --owner "$GITHUB_REPOSITORY_OWNER" \
            --repo "$GITHUB_REPOSITORY_NAME" \
            --commit "${{ github.sha }}" \
            --apps "$APPS"; then
            echo "✅ Successfully created GitHub releases for version $VERSION"
          else
            echo "❌ Failed to create GitHub releases for version $VERSION"
            exit 1  # Fail the job if release creation fails
          fi
        else
          echo "No apps found in matrix, skipping release creation"
        fi

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [plan-release, release, create-github-releases]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'docker'
      
    - name: Generate summary using release helper
      run: |
        # Use our release helper tool to generate the summary
        MATRIX='${{ needs.plan-release.outputs.release-matrix }}'
        EVENT_TYPE="workflow_dispatch"
        DRY_RUN="${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}"
        
        SUMMARY=$(bazel run //tools:release -- summary \
          --matrix "$MATRIX" \
          --version "${{ needs.plan-release.outputs.version }}" \
          --event-type "$EVENT_TYPE" \
          --repository-owner "${{ github.repository_owner }}" \
          $DRY_RUN)
        
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
