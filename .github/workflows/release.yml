name: Release

on:
  workflow_dispatch:
    inputs:
      apps:
        description: 'Comma-separated list of apps to release (e.g., hello_python,hello_go) or "all" for all apps'
        required: true
        default: 'all'
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
      dry_run:
        description: 'Dry run - build but do not publish'
        type: boolean
        default: false

jobs:
  # Detect what apps have changed and build release plan
  plan-release:
    name: Plan Release
    runs-on: ubuntu-latest
    outputs:
      release-matrix: ${{ steps.plan.outputs.matrix }}
      version: ${{ steps.plan.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'docker'
        
    - name: Plan release using release helper tool
      id: plan
      run: |
        # Determine version
        VERSION="${{ github.event.inputs.version }}"
        EVENT_TYPE="workflow_dispatch"
        APPS_INPUT="${{ github.event.inputs.apps }}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Use release helper to plan the release
        echo "Planning release with version $VERSION, event type $EVENT_TYPE"
        PLAN_OUTPUT=$(bazel run --config=ci //tools:release -- plan \
          --event-type "$EVENT_TYPE" \
          --apps "$APPS_INPUT" \
          --version "$VERSION" \
          --format github)
        
        # Parse output from release helper
        echo "$PLAN_OUTPUT" | while IFS= read -r line; do
          if [[ "$line" == matrix=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
          elif [[ "$line" == apps=* ]]; then
            echo "${line}" >> $GITHUB_OUTPUT
            APPS_LIST="${line#apps=}"
            if [[ -n "$APPS_LIST" ]]; then
              echo "Release plan: $APPS_LIST"
            else
              echo "No apps to release"
            fi
          fi
        done

  # Build and release selected apps
  release:
    name: Release ${{ matrix.app }}
    runs-on: ubuntu-latest
    needs: plan-release
    if: needs.plan-release.outputs.release-matrix != '' && fromJson(needs.plan-release.outputs.release-matrix).include[0] != null
    strategy:
      matrix: ${{ fromJson(needs.plan-release.outputs.release-matrix) }}
      fail-fast: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        setup-docker: 'true'
        cache-suffix: 'docker'
        
    # Login unless it's a manual dispatch with dry_run=true
    # - Manual dispatch with dry_run=false: login (needed for publishing)
    # - Manual dispatch with dry_run=true: skip login (no publishing)
    # NOTE: GHCR_PAT secret should be created with write:packages and read:packages scopes
    # Falls back to GITHUB_TOKEN if GHCR_PAT is not available (limited permissions)
    - name: Log in to GitHub Container Registry
      if: ${{ github.event.inputs.dry_run == 'false' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_PAT || secrets.GITHUB_TOKEN }}
        
    - name: Build and release app using consolidated release helper
      env:
        APP: ${{ matrix.app }}
        VERSION: ${{ needs.plan-release.outputs.version }}
        DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
      run: |
        echo "Building and releasing $APP version $VERSION using consolidated release system"
        
        # Use our release helper tool to handle the entire release process
        if [[ "$DRY_RUN" == "true" ]]; then
          echo "DRY RUN: Building and testing release process without publishing"
          bazel run --config=ci //tools:release -- release "$APP" --version "$VERSION" --commit "${{ github.sha }}" --dry-run
        else
          echo "Building and publishing $APP $VERSION"
          bazel run --config=ci //tools:release -- release "$APP" --version "$VERSION" --commit "${{ github.sha }}"
          echo "Successfully released $APP $VERSION"
        fi

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [plan-release, release]
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'docker'
      
    - name: Generate summary using release helper
      run: |
        # Use our release helper tool to generate the summary
        MATRIX='${{ needs.plan-release.outputs.release-matrix }}'
        EVENT_TYPE="workflow_dispatch"
        DRY_RUN="${{ github.event.inputs.dry_run == 'true' && '--dry-run' || '' }}"
        
        SUMMARY=$(bazel run //tools:release -- summary \
          --matrix "$MATRIX" \
          --version "${{ needs.plan-release.outputs.version }}" \
          --event-type "$EVENT_TYPE" \
          --repository-owner "${{ github.repository_owner }}" \
          $DRY_RUN)
        
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        MATRIX='${{ needs.plan-release.outputs.release-matrix }}'
        if [[ "$MATRIX" == "" || "$MATRIX" == '{"include":[]}' ]]; then
          echo "🔍 **Result:** No apps detected for release" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.release.result }}" == "skipped" ]]; then
          echo "⏭️ **Result:** Release job was skipped" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.release.result }}" == "success" ]]; then
          echo "✅ **Result:** Release completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract app names from matrix
          APPS=$(echo "$MATRIX" | jq -r '.include[].app' | tr '\n' ' ')
          echo "� **Apps:** $APPS" >> $GITHUB_STEP_SUMMARY
          echo "🏷️  **Version:** ${{ needs.plan-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          echo "📝 **Trigger:** Manual dispatch" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "🧪 **Mode:** Dry run (no images published)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Container Images" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "**Dry run mode - no images were published**" >> $GITHUB_STEP_SUMMARY
          else
            echo "Published to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
            for app in $APPS; do
              app_lower=$(echo "$app" | tr '[:upper:]' '[:lower:]')
              echo "- \`ghcr.io/${{ github.repository_owner }}/$app_lower:${{ needs.plan-release.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
            done
          fi
        else
          echo "❌ **Result:** Release failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ needs.release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the release job logs for details about the failure." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Still show what was planned to be released
          APPS=$(echo "$MATRIX" | jq -r '.include[].app' | tr '\n' ' ')
          echo "**Planned apps:** $APPS" >> $GITHUB_STEP_SUMMARY
          echo "**Planned version:** ${{ needs.plan-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        fi
