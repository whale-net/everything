---
name: Helm Chart Release

on:
  push:
    branches: [main]
    paths:
      - 'tools/helm_chart_release.bzl'
      - 'tools/templates/**'
      - '**/BUILD.bazel'
      - '**/*_chart_*'
  pull_request:
    branches: [main]
    paths:
      - 'tools/helm_chart_release.bzl'
      - 'tools/templates/**'
      - '**/BUILD.bazel'
      - '**/*_chart_*'
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to release charts for (e.g., manman, demo, or all)'
        required: true
        default: 'all'
      chart_version:
        description: 'Chart version to release (leave empty when using increment options)'
        required: false
      increment_minor:
        description: 'Auto-increment minor version (resets patch to 0)'
        type: boolean
        default: false
      increment_patch:
        description: 'Auto-increment patch version'
        type: boolean
        default: false
      publish_to_pages:
        description: 'Publish to GitHub Pages'
        required: true
        type: boolean
        default: false

env:
  BAZEL_VERSION: '8.3.1'

jobs:
  # Validate inputs and ensure mutual exclusivity
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
    - name: Validate mutually exclusive version options
      run: |
        CHART_VERSION="${{ github.event.inputs.chart_version }}"
        INCREMENT_MINOR="${{ github.event.inputs.increment_minor }}"
        INCREMENT_PATCH="${{ github.event.inputs.increment_patch }}"
        
        # Count how many version options are set
        OPTION_COUNT=0
        if [[ -n "$CHART_VERSION" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        if [[ "$INCREMENT_MINOR" == "true" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        if [[ "$INCREMENT_PATCH" == "true" ]]; then
          OPTION_COUNT=$((OPTION_COUNT + 1))
        fi
        
        # Ensure exactly one option is set for manual dispatch
        if [[ $OPTION_COUNT -eq 0 ]]; then
          echo "Error: Must specify exactly one of: chart_version, increment_minor, or increment_patch"
          exit 1
        elif [[ $OPTION_COUNT -gt 1 ]]; then
          echo "Error: chart_version, increment_minor, and increment_patch are mutually exclusive. Specify only one."
          exit 1
        fi
        
        echo "Input validation passed"

  # Discovery job to find all helm chart targets
  discover-charts:
    runs-on: ubuntu-latest
    needs: [validate-inputs]
    if: always() && (needs.validate-inputs.result == 'success' || needs.validate-inputs.result == 'skipped')
    outputs:
      charts: ${{ steps.discover.outputs.charts }}
      domains: ${{ steps.discover.outputs.domains }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: '1.20.0'

      - name: Discover and plan helm chart releases
        id: discover
        run: |
          echo "Discovering helm chart targets..."

          # Get all targets that use helm_chart_release_macro
          CHART_TARGETS=$(bazel query \
            "kind('helm_chart_release', //...)" 2>/dev/null || echo "")

          if [ -z "$CHART_TARGETS" ]; then
            echo "No helm chart targets found"
            echo "charts=[]" >> $GITHUB_OUTPUT
            echo "domains=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found chart targets: $CHART_TARGETS"
          
          # Show domain filtering info for workflow_dispatch
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Domain filter: ${DOMAIN_FILTER}"
            echo "Version strategy: ${VERSION_STRATEGY}"
          fi

          # Determine version to use
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            DOMAIN_FILTER="${{ github.event.inputs.domain }}"
            CHART_VERSION="${{ github.event.inputs.chart_version }}"
            INCREMENT_MINOR="${{ github.event.inputs.increment_minor }}"
            INCREMENT_PATCH="${{ github.event.inputs.increment_patch }}"
            
            # For increment options, we'll use a placeholder and let the tagging job handle version calculation
            if [[ "$INCREMENT_MINOR" == "true" ]]; then
              VERSION_STRATEGY="increment_minor"
              CHART_VERSION="increment_minor"
            elif [[ "$INCREMENT_PATCH" == "true" ]]; then
              VERSION_STRATEGY="increment_patch" 
              CHART_VERSION="increment_patch"
            elif [[ -n "$CHART_VERSION" ]]; then
              VERSION_STRATEGY="specific"
            else
              # Fallback to default
              CHART_VERSION="1.0.0"
              VERSION_STRATEGY="specific"
            fi
          else
            # For push/PR events, use default version and process all domains
            DOMAIN_FILTER="all"
            CHART_VERSION="1.0.0"
            VERSION_STRATEGY="specific"
          fi

          # Extract domains and chart info
          CHARTS_JSON="["
          DOMAINS_JSON="["

          for target in $CHART_TARGETS; do
            # Extract domain and chart name from target
            # Target format: //domain:chart_name
            domain=$(echo $target | cut -d'/' -f3 | cut -d':' -f1)
            chart_name=$(echo $target | cut -d':' -f2)
            
            # Apply domain filtering
            if [[ "$DOMAIN_FILTER" != "all" && "$domain" != "$DOMAIN_FILTER" ]]; then
              echo "Skipping chart $target (domain $domain doesn't match filter $DOMAIN_FILTER)"
              continue
            fi

            # Add to charts array
            if [ "$CHARTS_JSON" != "[" ]; then
              CHARTS_JSON+=","
            fi
            CHARTS_JSON+="{\"target\":\"$target\","
            CHARTS_JSON+="\"domain\":\"$domain\",\"name\":\"$chart_name\",\"version\":\"$CHART_VERSION\",\"version_strategy\":\"$VERSION_STRATEGY\"}"

            # Add to domains array (unique)
            if [[ ! "$DOMAINS_JSON" =~ "\"$domain\"" ]]; then
              if [ "$DOMAINS_JSON" != "[" ]; then
                DOMAINS_JSON+=","
              fi
              DOMAINS_JSON+="\"$domain\""
            fi
          done

          CHARTS_JSON+="]"
          DOMAINS_JSON+="]"

          echo "charts=$CHARTS_JSON" >> $GITHUB_OUTPUT
          echo "domains=$DOMAINS_JSON" >> $GITHUB_OUTPUT

          echo "Discovered charts: $CHARTS_JSON"
          echo "Discovered domains: $DOMAINS_JSON"

  # Build and test charts
  build-charts:
    runs-on: ubuntu-latest
    needs: discover-charts
    if: >-
      needs.discover-charts.outputs.charts != '[]' &&
      needs.discover-charts.outputs.charts != ''
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.discover-charts.outputs.charts) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: '1.20.0'

      - name: Build helm chart with version
        run: |
          echo "Building chart: ${{ matrix.chart.target }} with version: ${{ matrix.chart.version }}"
          
          # Update the chart version in the BUILD file or pass as parameter
          # For now, we'll build the chart and then update the version in the generated Chart.yaml
          bazel build "${{ matrix.chart.target }}"
          
          # Check if version needs to be updated in generated Chart.yaml
          chart_name="${{ matrix.chart.domain }}-${{ matrix.chart.name }}"
          chart_yaml="bazel-bin/${{ matrix.chart.domain }}/${chart_name}/Chart.yaml"
          
          if [ -f "$chart_yaml" ] && [ "${{ matrix.chart.version }}" != "1.0.0" ]; then
            echo "Updating chart version from 1.0.0 to ${{ matrix.chart.version }}"
            sed -i "s/version: 1.0.0/version: ${{ matrix.chart.version }}/" "$chart_yaml"
          fi

      - name: Validate chart structure
        run: |
          chart_name="${{ matrix.chart.domain }}-${{ matrix.chart.name }}"
          echo "Validating chart: $chart_name with version: ${{ matrix.chart.version }}"

          # Check for required files
          domain="${{ matrix.chart.domain }}"
          manifest_file="bazel-bin/${domain}/${chart_name}.manifest"
          chart_yaml="bazel-bin/${domain}/${chart_name}/Chart.yaml"
          values_yaml="bazel-bin/${domain}/${chart_name}/values.yaml"

          if [ ! -f "$manifest_file" ]; then
            echo "Error: Missing manifest file: $manifest_file"
            exit 1
          fi

          if [ ! -f "$chart_yaml" ]; then
            echo "Error: Missing Chart.yaml: $chart_yaml"
            exit 1
          fi

          if [ ! -f "$values_yaml" ]; then
            echo "Error: Missing values.yaml: $values_yaml"
            exit 1
          fi

          echo "Chart validation successful!"
          echo "Manifest contents:"
          cat "$manifest_file"
          
          echo "Chart.yaml contents:"
          cat "$chart_yaml"

      - name: Package chart for release
        if: >-
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.publish_to_pages == 'true'
        run: |
          chart_name="${{ matrix.chart.domain }}-${{ matrix.chart.name }}"
          chart_dir="bazel-bin/${{ matrix.chart.domain }}/${chart_name}"

          # Create a proper Helm chart package structure
          mkdir -p "charts/${chart_name}"
          cp "$chart_dir/Chart.yaml" "charts/${chart_name}/"
          cp "$chart_dir/values.yaml" "charts/${chart_name}/"

          # Add templates if they exist
          if [ -d "$chart_dir/templates" ]; then
            cp -r "$chart_dir/templates" "charts/${chart_name}/"
          fi

          echo "Packaged chart structure:"
          find "charts/${chart_name}" -type f

      - name: Upload chart artifacts
        if: >-
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.publish_to_pages == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ matrix.chart.domain }}-${{ matrix.chart.name }}
          path: charts/
          retention-days: 30

  # Create git tags for chart releases (independent of Pages publishing)
  tag-chart-releases:
    runs-on: ubuntu-latest
    needs: [discover-charts, build-charts]
    if: >-
      github.event_name == 'workflow_dispatch' &&
      needs.discover-charts.outputs.charts != '[]' &&
      needs.discover-charts.outputs.charts != ''
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.discover-charts.outputs.charts) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create and push chart git tag
        run: |
          chart_name="${{ matrix.chart.name }}"
          domain="${{ matrix.chart.domain }}"
          version="${{ matrix.chart.version }}"
          version_strategy="${{ matrix.chart.version_strategy }}"
          
          echo "Processing chart: $domain/$chart_name with version: $version (strategy: $version_strategy)"
          
          # Calculate actual version if using increment strategy
          if [[ "$version_strategy" == "increment_minor" || "$version_strategy" == "increment_patch" ]]; then
            echo "Calculating incremented version for $domain/$chart_name..."
            
            # Find latest chart tag
            tag_pattern="${domain}-${chart_name}-chart.v*"
            latest_tag=$(git tag -l "$tag_pattern" | sort -V | tail -1)
            
            if [[ -n "$latest_tag" ]]; then
              # Extract version from tag (format: domain-chart_name-chart.vX.Y.Z)
              current_version=$(echo "$latest_tag" | sed "s/^${domain}-${chart_name}-chart\.//")
              echo "Found latest version: $current_version"
              
              # Parse semantic version
              if [[ "$current_version" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                major="${BASH_REMATCH[1]}"
                minor="${BASH_REMATCH[2]}"
                patch="${BASH_REMATCH[3]}"
                
                if [[ "$version_strategy" == "increment_minor" ]]; then
                  version="v${major}.$((minor + 1)).0"
                else
                  version="v${major}.${minor}.$((patch + 1))"
                fi
                echo "Calculated new version: $version"
              else
                echo "Could not parse current version: $current_version"
                if [[ "$version_strategy" == "increment_minor" ]]; then
                  version="v0.1.0"
                else
                  version="v0.0.1"
                fi
              fi
            else
              echo "No previous version found"
              if [[ "$version_strategy" == "increment_minor" ]]; then
                version="v0.1.0"
              else
                version="v0.0.1"
              fi
            fi
          fi
          
          # Create chart tag using the same pattern as apps but with -chart suffix
          tag_name="${domain}-${chart_name}-chart.${version}"
          
          echo "Creating git tag for chart: $tag_name"
          
          # Create and push the tag directly
          git tag -a "$tag_name" -m "Release $domain-$chart_name chart version $version" "${{ github.sha }}"
          git push origin "$tag_name"
          
          echo "✅ Created git tag: $tag_name"

  # Publish charts to GitHub Pages
  publish-to-pages:
    runs-on: ubuntu-latest
    needs: [discover-charts, build-charts]
    if: >-
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.publish_to_pages == 'true'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all chart artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Consolidate and package charts
        run: |
          echo "Consolidating charts..."
          mkdir -p helm-repo

          # Move all charts to a single directory
          find artifacts/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Processing: $file"
            # Copy chart directories preserving structure
            chart_dir=$(dirname "$file")
            chart_name=$(basename "$chart_dir")
            if [ ! -d "helm-repo/$chart_name" ]; then
              cp -r "$chart_dir" "helm-repo/"
            fi
          done

          echo "Chart directory structure:"
          find helm-repo/ -type f

          # Package each chart
          cd helm-repo
          for chart_dir in */; do
            if [ -d "$chart_dir" ] && [ -f "$chart_dir/Chart.yaml" ]; then
              echo "Packaging chart: $chart_dir"
              helm package "$chart_dir"
            fi
          done

          # Generate repository index
          repo_url="https://${{ github.repository_owner }}.github.io"
          repo_url="${repo_url}/${{ github.event.repository.name }}/"
          helm repo index . --url "$repo_url"

          echo "Generated packages:"
          ls -la *.tgz || echo "No .tgz files found"

          echo "Repository index:"
          cat index.yaml

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: helm-repo/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [discover-charts, build-charts, tag-chart-releases]
    if: always()
    steps:
      - name: Print workflow summary
        run: |
          echo "## Helm Chart Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.discover-charts.result }}" = "success" ]; then
            echo "✅ **Chart Discovery**: Success" >> $GITHUB_STEP_SUMMARY
            chart_count=$(echo '${{ needs.discover-charts.outputs.charts }}' | \
              jq '. | length')
            echo "- Charts found: $chart_count" >> $GITHUB_STEP_SUMMARY
            domains="${{ needs.discover-charts.outputs.domains }}"
            echo "- Domains: $domains" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Chart Discovery**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-charts.result }}" = "success" ]; then
            echo "✅ **Chart Build**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-charts.result }}" = "failure" ]; then
            echo "❌ **Chart Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Chart Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ needs.tag-chart-releases.result }}" = "success" ]; then
              echo "✅ **Chart Tagging**: Success" >> $GITHUB_STEP_SUMMARY
              echo "- Git tags created for chart releases" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.tag-chart-releases.result }}" = "failure" ]; then
              echo "❌ **Chart Tagging**: Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏭️ **Chart Tagging**: Skipped" >> $GITHUB_STEP_SUMMARY
            fi

            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            domain_filter="${{ github.event.inputs.domain }}"
            chart_version="${{ github.event.inputs.chart_version }}"
            increment_minor="${{ github.event.inputs.increment_minor }}"
            increment_patch="${{ github.event.inputs.increment_patch }}"
            publish_pages="${{ github.event.inputs.publish_to_pages }}"
            echo "- Domain filter: $domain_filter" >> $GITHUB_STEP_SUMMARY
            if [[ -n "$chart_version" ]]; then
              echo "- Chart version: $chart_version" >> $GITHUB_STEP_SUMMARY
            elif [[ "$increment_minor" == "true" ]]; then
              echo "- Version strategy: Auto-increment minor" >> $GITHUB_STEP_SUMMARY
            elif [[ "$increment_patch" == "true" ]]; then
              echo "- Version strategy: Auto-increment patch" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- Publish to Pages: $publish_pages" >> $GITHUB_STEP_SUMMARY
          fi
