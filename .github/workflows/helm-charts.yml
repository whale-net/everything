---
name: Helm Chart Release

on:
  push:
    branches: [main]
    paths:
      - 'tools/helm_chart_release.bzl'
      - 'tools/templates/**'
      - '**/BUILD.bazel'
      - '**/*_chart_*'
  pull_request:
    branches: [main]
    paths:
      - 'tools/helm_chart_release.bzl'
      - 'tools/templates/**'
      - '**/BUILD.bazel'
      - '**/*_chart_*'
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to release charts for (e.g., demo, or all)'
        required: true
        default: 'all'
      chart_version:
        description: 'Chart version to release'
        required: true
        default: '1.0.0'
      publish_to_pages:
        description: 'Publish to GitHub Pages'
        required: true
        type: boolean
        default: false

permissions:
  contents: read
  pages: write
  id-token: write

env:
  BAZEL_VERSION: '8.3.1'

jobs:
  # Discovery job to find all helm chart targets
  discover-charts:
    runs-on: ubuntu-latest
    outputs:
      charts: ${{ steps.discover.outputs.charts }}
      domains: ${{ steps.discover.outputs.domains }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: '1.20.0'

      - name: Discover helm chart targets
        id: discover
        run: |
          # Query for all helm chart targets
          echo "Discovering helm chart targets..."

          # Get all targets that use helm_chart_release_macro
          CHART_TARGETS=$(bazel query \
            "kind('helm_chart_release', //...)" 2>/dev/null || echo "")

          if [ -z "$CHART_TARGETS" ]; then
            echo "No helm chart targets found"
            echo "charts=[]" >> $GITHUB_OUTPUT
            echo "domains=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found chart targets: $CHART_TARGETS"
          
          # Get domain filter from workflow input
          DOMAIN_FILTER="${{ github.event.inputs.domain || 'all' }}"
          echo "Domain filter: $DOMAIN_FILTER"

          # Extract domains and chart info
          CHARTS_JSON="["
          DOMAINS_JSON="["
          
          # Check if domain filtering is requested
          DOMAIN_FILTER="${{ github.event.inputs.domain || 'all' }}"
          echo "Domain filter: $DOMAIN_FILTER"

          for target in $CHART_TARGETS; do
            # Extract domain and chart name from target
            # Target format: //domain:chart_name
            domain=$(echo $target | cut -d'/' -f3 | cut -d':' -f1)
            chart_name=$(echo $target | cut -d':' -f2)

            # Apply domain filter
            if [ "$DOMAIN_FILTER" != "all" ] && [ "$domain" != "$DOMAIN_FILTER" ]; then
              echo "Skipping chart $chart_name in domain $domain (filter: $DOMAIN_FILTER)"

              continue
            fi

            # Add to charts array
            if [ "$CHARTS_JSON" != "[" ]; then
              CHARTS_JSON+=","
            fi
            CHARTS_JSON+="{\"target\":\"$target\","
            CHARTS_JSON+="\"domain\":\"$domain\",\"name\":\"$chart_name\"}"

            # Add to domains array (unique)
            if [[ ! "$DOMAINS_JSON" =~ "\"$domain\"" ]]; then
              if [ "$DOMAINS_JSON" != "[" ]; then
                DOMAINS_JSON+=","
              fi
              DOMAINS_JSON+="\"$domain\""
            fi
          done

          CHARTS_JSON+="]"
          DOMAINS_JSON+="]"

          echo "charts=$CHARTS_JSON" >> $GITHUB_OUTPUT
          echo "domains=$DOMAINS_JSON" >> $GITHUB_OUTPUT

          echo "Discovered charts: $CHARTS_JSON"
          echo "Discovered domains: $DOMAINS_JSON"

  # Build and test charts
  build-charts:
    runs-on: ubuntu-latest
    needs: discover-charts
    if: >-
      needs.discover-charts.outputs.charts != '[]' &&
      needs.discover-charts.outputs.charts != ''
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.discover-charts.outputs.charts) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Bazel
        uses: bazel-contrib/setup-bazel@0.15.0
        with:
          bazelisk-version: '1.20.0'

      - name: Build helm chart
        run: |
          echo "Building chart: ${{ matrix.chart.target }}"
          bazel build "${{ matrix.chart.target }}"

      - name: Validate chart structure
        run: |
          chart_name="${{ matrix.chart.domain }}-${{ matrix.chart.name }}"
          echo "Validating chart: $chart_name"

          # Check for required files
          domain="${{ matrix.chart.domain }}"
          manifest_file="bazel-bin/${domain}/${chart_name}.manifest"
          chart_yaml="bazel-bin/${domain}/${chart_name}/Chart.yaml"
          values_yaml="bazel-bin/${domain}/${chart_name}/values.yaml"

          if [ ! -f "$manifest_file" ]; then
            echo "Error: Missing manifest file: $manifest_file"
            exit 1
          fi

          if [ ! -f "$chart_yaml" ]; then
            echo "Error: Missing Chart.yaml: $chart_yaml"
            exit 1
          fi

          if [ ! -f "$values_yaml" ]; then
            echo "Error: Missing values.yaml: $values_yaml"
            exit 1
          fi
          
          # Check for templates directory
          templates_dir="bazel-bin/${domain}/${chart_name}/templates"
          if [ ! -d "$templates_dir" ]; then
            echo "Warning: Missing templates directory: $templates_dir"
          else
            echo "Templates found:"
            ls -la "$templates_dir"
          fi

          echo "Chart validation successful!"
          echo "Manifest contents:"
          cat "$manifest_file"

      - name: Package chart for release
        if: >-
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.publish_to_pages == 'true'
        run: |
          chart_name="${{ matrix.chart.domain }}-${{ matrix.chart.name }}"
          chart_dir="bazel-bin/${{ matrix.chart.domain }}/${chart_name}"

          # Create a proper Helm chart package structure
          mkdir -p "charts/${chart_name}"
          cp "$chart_dir/Chart.yaml" "charts/${chart_name}/"
          cp "$chart_dir/values.yaml" "charts/${chart_name}/"

          # Add templates if they exist
          if [ -d "$chart_dir/templates" ]; then
            cp -r "$chart_dir/templates" "charts/${chart_name}/"
          fi

          echo "Packaged chart structure:"
          find "charts/${chart_name}" -type f

      - name: Upload chart artifacts
        if: >-
          github.event_name == 'workflow_dispatch' &&
          github.event.inputs.publish_to_pages == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ matrix.chart.domain }}-${{ matrix.chart.name }}
          path: charts/
          retention-days: 30

  # Publish charts to GitHub Pages
  publish-to-pages:
    runs-on: ubuntu-latest
    needs: [discover-charts, build-charts]
    if: >-
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.publish_to_pages == 'true'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all chart artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Consolidate and package charts
        run: |
          echo "Consolidating charts..."
          mkdir -p helm-repo
          
          # Debug: Show what artifacts were downloaded
          echo "Downloaded artifacts structure:"
          find artifacts/ -type f | head -20
          
          # Debug: Count artifacts
          artifact_count=$(find artifacts/ -name "Chart.yaml" | wc -l)
          echo "Found $artifact_count chart(s) to process"
          
          # Find all chart directories in artifacts
          # Artifacts are structured as: artifacts/helm-chart-<domain>-<chart>/charts/<chart-name>/
          find artifacts/ -name "Chart.yaml" | while read chart_yaml; do
            chart_dir=$(dirname "$chart_yaml")
            chart_name=$(basename "$chart_dir")
            
            echo "Processing chart: $chart_name from $chart_dir"
            
            # Copy chart directory to helm-repo
            if [ -d "$chart_dir" ] && [ ! -d "helm-repo/$chart_name" ]; then
              cp -r "$chart_dir" "helm-repo/"
              echo "‚úÖ Copied chart: $chart_name"
            else
              echo "‚ö†Ô∏è  Skipped chart: $chart_name (already exists or source not found)"
            fi
          done

          echo "Consolidated chart directory structure:"
          find helm-repo/ -type f | sort

          # Verify we have charts to package
          chart_count=$(find helm-repo/ -maxdepth 1 -type d ! -path helm-repo/ | wc -l)
          if [ "$chart_count" -eq 0 ]; then
            echo "‚ùå No charts found to package"
            exit 1
          fi
          
          echo "Found $chart_count chart(s) to package"

          # Package each chart
          cd helm-repo
          for chart_dir in */; do
            if [ -d "$chart_dir" ] && [ -f "$chart_dir/Chart.yaml" ]; then
              echo "üì¶ Packaging chart: $chart_dir"
              helm package "$chart_dir"
              echo "‚úÖ Packaged: $chart_dir"
            fi
          done

          # Generate repository index
          repo_name="${{ github.repository }}"
          repo_name="${repo_name#*/}"  # Remove owner/ prefix
          repo_url="https://${{ github.repository_owner }}.github.io/$repo_name"
          echo "Generating index with URL: $repo_url"
          helm repo index . --url "$repo_url"

          echo "Generated packages:"
          ls -la *.tgz || echo "No .tgz files found"

          echo "Repository index:"
          cat index.yaml

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: helm-repo/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Summary job
  summary:
    runs-on: ubuntu-latest
    needs: [discover-charts, build-charts]
    if: always()
    steps:
      - name: Print workflow summary
        run: |
          echo "## Helm Chart Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.discover-charts.result }}" = "success" ]; then
            echo "‚úÖ **Chart Discovery**: Success" >> $GITHUB_STEP_SUMMARY
            chart_count=$(echo '${{ needs.discover-charts.outputs.charts }}' | \
              jq '. | length')
            echo "- Charts found: $chart_count" >> $GITHUB_STEP_SUMMARY
            domains="${{ needs.discover-charts.outputs.domains }}"
            echo "- Domains: $domains" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Chart Discovery**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build-charts.result }}" = "success" ]; then
            echo "‚úÖ **Chart Build**: Success" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-charts.result }}" = "failure" ]; then
            echo "‚ùå **Chart Build**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Chart Build**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Trigger Information" >> $GITHUB_STEP_SUMMARY
          echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            domain_filter="${{ github.event.inputs.domain }}"
            chart_version="${{ github.event.inputs.chart_version }}"
            publish_pages="${{ github.event.inputs.publish_to_pages }}"
            echo "- Domain filter: $domain_filter" >> $GITHUB_STEP_SUMMARY
            echo "- Chart version: $chart_version" >> $GITHUB_STEP_SUMMARY
            echo "- Publish to Pages: $publish_pages" >> $GITHUB_STEP_SUMMARY
          fi
