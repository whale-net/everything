name: Release Notes

on:
  push:
    tags:
      - '*-*.v*'  # Match domain-app.vX.Y.Z format

jobs:
  # Generate release notes for tag pushes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Build Environment
      uses: ./.github/actions/setup-build-env
      with:
        cache-suffix: 'release-notes'
        
    - name: Parse tag and identify app
      id: parse-tag
      run: |
        TAG_NAME="${{ github.ref_name }}"
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "Parsing tag: $TAG_NAME"
        
        # Parse tag to extract domain, app, and version
        # Expected format: domain-app.vX.Y.Z (e.g., demo-hello_python.v1.0.0)
        if [[ "$TAG_NAME" =~ ^([^-]+)-([^.]+)\.v(.+)$ ]]; then
          DOMAIN="${BASH_REMATCH[1]}"
          APP_NAME="${BASH_REMATCH[2]}" 
          VERSION="v${BASH_REMATCH[3]}"
          
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
          echo "app_name=$APP_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          echo "Parsed tag: domain=$DOMAIN, app=$APP_NAME, version=$VERSION"
          
          # Create matrix with single app
          MATRIX='{"include":[{"app":"'"$APP_NAME"'","domain":"'"$DOMAIN"'"}]}'
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX"
        else
          echo "ERROR: Tag format invalid. Expected format: domain-app.vX.Y.Z (e.g., demo-hello_python.v1.0.0)"
          echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Generate release notes for app
      if: steps.parse-tag.outputs.matrix != '' && fromJson(steps.parse-tag.outputs.matrix).include[0] != null
      env:
        APP_NAME: ${{ steps.parse-tag.outputs.app_name }}
        DOMAIN: ${{ steps.parse-tag.outputs.domain }}
        VERSION: ${{ steps.parse-tag.outputs.version }}
        TAG_NAME: ${{ steps.parse-tag.outputs.tag_name }}
      run: |
        echo "Generating release notes for $APP_NAME (domain: $DOMAIN) version $VERSION"
        
        echo "## 📝 Release Notes for $TAG_NAME" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Generate release notes using the release helper
        # This will detect changes between tags for changelog content
        RELEASE_NOTES=$(bazel run --config=ci //tools:release -- release-notes "$APP_NAME" \
          --current-tag "$TAG_NAME" \
          --format markdown)
        
        echo "Release notes generated for $APP_NAME:"
        echo "$RELEASE_NOTES"
        
        # Add to GitHub step summary
        echo "$RELEASE_NOTES" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "✅ Release notes generated for $APP_NAME $VERSION"
        
    - name: Handle invalid tag format
      if: steps.parse-tag.outputs.matrix == '' || fromJson(steps.parse-tag.outputs.matrix).include[0] == null
      env:
        TAG_NAME: ${{ github.ref_name }}
      run: |
        echo "## ❌ Invalid Tag Format: $TAG_NAME" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Expected format: \`domain-app.version\` (e.g., \`demo-hello_python.v1.0.0\`)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This tag does not follow the expected release tag format and will be ignored." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY