name: 'Setup Bazelisk with Caching'
description: 'Sets up Bazelisk with optimized Bazel caching for CI/CD workflows'

inputs:
  bazelisk-version:
    description: 'Bazelisk version to use (e.g., "1.x" for latest 1.x, or specific like "1.27.0")'
    required: false
    default: '1.x'
  
  cache-suffix:
    description: 'Additional suffix for cache key to avoid conflicts between workflows'
    required: false
    default: ''

outputs:
  cache-hit:
    description: 'A boolean value to indicate if there was a cache hit for Bazel'
    value: ${{ steps.bazel-cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Setup Bazelisk
      uses: bazelbuild/setup-bazelisk@v3
      with:
        bazelisk-version: ${{ inputs.bazelisk-version }}

    - name: Create Bazel cache directories
      shell: bash
      run: |
        # Create Bazel cache directories early to ensure they exist
        mkdir -p /tmp/bazel-cache /tmp/bazel-repo-cache
        # Ensure bazelisk cache directory exists
        mkdir -p ~/.cache/bazelisk

    - name: Generate cache key
      id: cache-key
      shell: bash
      run: |
        # Generate domain-specific cache keys
        BASE_KEY="${{ runner.os }}-bazel"
        
        # Core configuration hash (shared across domains)
        CONFIG_FILES="MODULE.bazel MODULE.bazel.lock .bazelrc .bazelversion"
        CONFIG_HASH=$(find . -name "MODULE.bazel" -o -name "MODULE.bazel.lock" -o -name ".bazelrc" -o -name ".bazelversion" | sort | xargs cat 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-config")
        
        # Domain-specific hashes
        GO_HASH=$(find . -name "go.mod" -o -name "go.sum" -o -path "./hello_go/*" -o -path "./libs/go/*" | sort | xargs cat 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-go")
        PYTHON_HASH=$(find . -name "requirements.in" -o -name "requirements.lock.txt" -o -path "./hello_python/*" -o -path "./libs/python/*" | sort | xargs cat 2>/dev/null | sha256sum | cut -d' ' -f1 || echo "no-python")
        
        # Create domain-specific cache keys
        GO_CACHE_KEY="${BASE_KEY}-go-${CONFIG_HASH}-${GO_HASH}-${{ inputs.cache-suffix }}"
        PYTHON_CACHE_KEY="${BASE_KEY}-python-${CONFIG_HASH}-${PYTHON_HASH}-${{ inputs.cache-suffix }}"
        SHARED_CACHE_KEY="${BASE_KEY}-shared-${CONFIG_HASH}-${{ inputs.cache-suffix }}"
        
        # Export cache keys for use in cache steps
        echo "go-key=${GO_CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "python-key=${PYTHON_CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "shared-key=${SHARED_CACHE_KEY}" >> $GITHUB_OUTPUT

    - name: Mount Bazel cache
      id: bazel-cache
      uses: actions/cache@v4
      with:
        path: |
          /tmp/bazel-cache
          /tmp/bazel-repo-cache
          ~/.cache/bazelisk
        key: ${{ steps.cache-key.outputs.shared-key }}
        restore-keys: |
          ${{ runner.os }}-bazel-shared-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock', '.bazelrc', '.bazelversion') }}-
          ${{ runner.os }}-bazel-cache-

    - name: Mount Go domain cache
      id: go-cache
      uses: actions/cache@v4
      with:
        path: |
          /tmp/bazel-cache/go
          /tmp/bazel-repo-cache/go
        key: ${{ steps.cache-key.outputs.go-key }}
        restore-keys: |
          ${{ runner.os }}-bazel-go-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock', '.bazelrc', '.bazelversion') }}-
          ${{ runner.os }}-bazel-cache-

    - name: Mount Python domain cache
      id: python-cache
      uses: actions/cache@v4
      with:
        path: |
          /tmp/bazel-cache/python
          /tmp/bazel-repo-cache/python
        key: ${{ steps.cache-key.outputs.python-key }}
        restore-keys: |
          ${{ runner.os }}-bazel-python-${{ hashFiles('MODULE.bazel', 'MODULE.bazel.lock', '.bazelrc', '.bazelversion') }}-
          ${{ runner.os }}-bazel-cache-

    - name: Cache status
      shell: bash
      run: |
        SHARED_HIT="${{ steps.bazel-cache.outputs.cache-hit }}"
        GO_HIT="${{ steps.go-cache.outputs.cache-hit }}"
        PYTHON_HIT="${{ steps.python-cache.outputs.cache-hit }}"
        
        if [[ "$SHARED_HIT" == "true" ]]; then
          echo "âœ… Shared Bazel cache hit"
        else
          echo "ðŸ”„ Shared Bazel cache miss"
        fi
        
        if [[ "$GO_HIT" == "true" ]]; then
          echo "âœ… Go domain cache hit"
        else
          echo "ðŸ”„ Go domain cache miss"
        fi
        
        if [[ "$PYTHON_HIT" == "true" ]]; then
          echo "âœ… Python domain cache hit"
        else
          echo "ðŸ”„ Python domain cache miss"
        fi
        
        # Show cache directory sizes for debugging
        echo "Cache directory sizes:"
        du -sh /tmp/bazel-cache 2>/dev/null || echo "  /tmp/bazel-cache: not found"
        du -sh /tmp/bazel-cache/go 2>/dev/null || echo "  /tmp/bazel-cache/go: not found"
        du -sh /tmp/bazel-cache/python 2>/dev/null || echo "  /tmp/bazel-cache/python: not found"
        du -sh /tmp/bazel-repo-cache 2>/dev/null || echo "  /tmp/bazel-repo-cache: not found"
        du -sh ~/.cache/bazelisk 2>/dev/null || echo "  ~/.cache/bazelisk: not found"