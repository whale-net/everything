load("@rules_python//python:defs.bzl", "py_library")
load("//tools/bazel:release.bzl", "release_app", "release_helm_chart")
load("//tools/openapi:openapi_client.bzl", "openapi_client")

# Re-export all manman modules for convenience
py_library(
    name = "manman",
    visibility = ["//visibility:public"],
    deps = [
        "//manman/src:manman_core",
        "//manman/src/host:manman_host",
        "//manman/src/worker:manman_worker",
        "//manman/src/repository:manman_repository",
        "//manman/src/migrations:manman_migrations",
    ],
)

# Release configurations for manman services
release_app(
    name = "experience-api",
    binary_name = "//manman/src/host/api/experience:experience_api",
    language = "python",
    domain = "manman",
    description = "Experience API service for managing user experiences and workflows",
    app_type = "external-api",
    port = 8000,
    replicas = 1,  # Single replica for development
    ingress_host = "experience.manman.local",
    ingress_tls_secret = "manman-tls",
    args = ["start-experience-api"],
    fastapi_app = "manman.src.host.api.experience:create_app",
)

release_app(
    name = "status-api", 
    binary_name = "//manman/src/host/api/status:status_api",
    language = "python",
    domain = "manman",
    description = "Status API service for monitoring and health checks",
    app_type = "internal-api",
    port = 8000,
    replicas = 1,  # Single replica for development
    args = ["start-status-api"],
    fastapi_app = "manman.src.host.api.status:create_app",
)

release_app(
    name = "worker-dal-api",
    binary_name = "//manman/src/host/api/worker_dal:worker_dal_api", 
    language = "python",
    domain = "manman",
    description = "Worker DAL API service for data access layer operations",
    app_type = "external-api",
    port = 8000,
    replicas = 1,  # Single replica for development
    ingress_host = "dal.manman.local",
    ingress_tls_secret = "manman-tls",
    args = ["start-worker-dal-api"],
    fastapi_app = "manman.src.host.api.worker_dal:create_app",
)

release_app(
    name = "status-processor",
    binary_name = "//manman/src/host:status_processor",
    language = "python", 
    domain = "manman",
    description = "Status processor service for background status processing",
    app_type = "internal-api",
    port = 8000,
    replicas = 1,  # Single replica for development
    args = ["start-status-processor"],
)

release_app(
    name = "worker",
    binary_name = "//manman/src/worker:worker",
    language = "python",
    domain = "manman", 
    description = "Background worker service for processing tasks and messages",
    app_type = "worker",
    replicas = 1,  # Single replica for development
    args = ["start"],
    additional_tars = ["//tools/steamcmd:steamcmd_layers"],
)

release_app(
    name = "migration",
    binary_name = "//manman/src/host:migration",
    language = "python",
    domain = "manman",
    description = "Database migration job for schema updates",
    app_type = "job",
    replicas = 1,  # Jobs always run once
    args = ["run-migration"],  # Pass the migration command as container args
)

# ==============================================================================
# OpenAPI Client Generation
# Auto-generated clients for ManMan APIs using specs from release_app
# ==============================================================================

# Compatibility aliases for OpenAPI specs (auto-generated by release_app above)
alias(
    name = "experience_api_spec",
    actual = ":experience-api_openapi_spec",
    visibility = ["//visibility:public"],
)

alias(
    name = "status_api_spec",
    actual = ":status-api_openapi_spec",
    visibility = ["//visibility:public"],
)

alias(
    name = "worker_dal_api_spec",
    actual = ":worker-dal-api_openapi_spec",
    visibility = ["//visibility:public"],
)

# ==============================================================================
# Helm Chart Composition
# ==============================================================================

# List of all manman app metadata targets for chart composition
# Update this list when adding or removing services
# Note: worker is excluded as it will be deployed outside the cloud
MANMAN_APPS = [
    ":experience-api_metadata",
    ":status-api_metadata",
    ":worker-dal-api_metadata",
    ":status-processor_metadata",
    ":migration_metadata",
]

# Helm chart composition - combines all manman services into a single chart
# This is registered with the release system for CI/CD integration
# Chart tags will use the format: helm-manman-host-services.vX.Y.Z
release_helm_chart(
    name = "manman_chart",
    apps = MANMAN_APPS,
    chart_name = "host-services",
    namespace = "manman",
    environment = "dev",
    domain = "manman",
    # chart_version omitted - uses default "0.0.0-dev" for local builds
    # Release system auto-versions from git tags (helm-manman-host-services.v*)
    visibility = ["//visibility:public"],
)

# Note: Manual helm charts are provided in manman/charts/manman-host/
# Those charts offer more sophisticated configuration for production deployments

filegroup(
    name = "tiltfile",
    srcs = ["Tiltfile"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "charts", 
    srcs = glob(["charts/**/*"], allow_empty = True),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "design_docs",
    srcs = glob(["design/**/*"]),
    visibility = ["//visibility:public"],
)
