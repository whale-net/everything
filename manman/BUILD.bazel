load("@rules_python//python:defs.bzl", "py_library")
load("//tools:release.bzl", "release_app")
load("//tools:helm_composition_simple.bzl", "helm_chart_composed", "k8s_artifact")

# Re-export all manman modules for convenience
py_library(
    name = "manman",
    visibility = ["//visibility:public"],
    deps = [
        "//manman/src:manman_core",
        "//manman/src/host:manman_host",
        "//manman/src/worker:manman_worker",
        "//manman/src/repository:manman_repository",
        "//manman/src/migrations:manman_migrations",
    ],
)

# Release configurations for manman services
release_app(
    name = "experience_api",
    binary_target = "//manman/src/host:experience_api",
    language = "python",
    domain = "manman",
    description = "Experience API service for managing user experiences and workflows",
)

release_app(
    name = "status_api", 
    binary_target = "//manman/src/host:status_api",
    language = "python",
    domain = "manman",
    description = "Status API service for monitoring and health checks",
)

release_app(
    name = "worker_dal_api",
    binary_target = "//manman/src/host:worker_dal_api", 
    language = "python",
    domain = "manman",
    description = "Worker DAL API service for data access layer operations",
)

release_app(
    name = "status_processor",
    binary_target = "//manman/src/host:status_processor",
    language = "python", 
    domain = "manman",
    description = "Status processor service for background status processing",
)

release_app(
    name = "worker",
    binary_target = "//manman/src/worker:worker",
    language = "python",
    domain = "manman", 
    description = "Background worker service for processing tasks and messages",
)

# Note: Manual helm charts are provided in manman/charts/manman-host/
# Those charts offer more sophisticated configuration for production deployments

filegroup(
    name = "tiltfile",
    srcs = ["Tiltfile"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "charts", 
    srcs = glob(["charts/**/*"]),
    visibility = ["//visibility:public"],
)

filegroup(
    name = "design_docs",
    srcs = glob(["design/**/*"]),
    visibility = ["//visibility:public"],
)

# Manual Kubernetes artifacts with dependency ordering
k8s_artifact(
    name = "migrations_job",
    manifest = "k8s/migrations-job.yaml",
    artifact_type = "job",
    hook_weight = -10,  # Run first - highest priority for migrations
    hook_delete_policy = "before-hook-creation",
)

k8s_artifact(
    name = "config",
    manifest = "k8s/config.yaml", 
    artifact_type = "configmap",
    depends_on = ["migrations_job"],  # Config depends on migrations completing
    hook_weight = -5,  # Run after migrations
)

# Composed helm charts - demonstrating flexible deployment patterns
helm_chart_composed(
    name = "manman_core",
    description = "Core ManMan services with shared database and migrations",
    apps = [
        ":experience_api_metadata",
        ":status_api_metadata", 
        ":worker_dal_api_metadata",
        ":status_processor_metadata"
    ],
    k8s_artifacts = [
        ":migrations_job",
        ":config"
    ],
    pre_deploy_jobs = ["migrations_job"],
    chart_values = {
        "postgresql.enabled": "true",
        "ingress.enabled": "false",
        "migrations.image": "ghcr.io/whale-net/manman-experience_api"
    },
    deploy_order_weight = -10,  # Deploy first - core infrastructure
)

