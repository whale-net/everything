load("@rules_python//python:defs.bzl", "py_binary", "py_library", "py_test")
load("//tools:release.bzl", "release_app")
load("//tools:openapi_client.bzl", "openapi_client")

# Host API services library
py_library(
    name = "manman_host",
    srcs = glob(["**/*.py"], exclude=["*_test.py"]),
    visibility = [
        "//manman:__subpackages__",
        "//libs/python/openapi_gen:__pkg__",
    ],
    deps = [
        "//manman/src:manman_core",
        "//manman/src/repository:manman_repository",
        "//manman/src/migrations:manman_migrations",  # Required for migration commands
        "@pypi//:fastapi",
        "@pypi//:uvicorn",
        "@pypi//:gunicorn",
        "@pypi//:typer",
        "@pypi//:alembic",
        "@pypi//:opentelemetry-instrumentation-fastapi",
        "@pypi//:requests",
        "@pypi//:python-jose",
    ],
)

# Binary targets for host services
py_binary(
    name = "experience_api",
    srcs = ["main.py"],
    main = "main.py", 
    deps = [":manman_host"],
    args = ["start-experience-api"],
    visibility = ["//manman:__pkg__"],
)

py_binary(
    name = "status_api",
    srcs = ["main.py"],
    main = "main.py",
    deps = [":manman_host"],
    args = ["start-status-api"],
    visibility = ["//manman:__pkg__"],
)

py_binary(
    name = "worker_dal_api", 
    srcs = ["main.py"],
    main = "main.py",
    deps = [":manman_host"],
    args = ["start-worker-dal-api"],
    visibility = ["//manman:__pkg__"],
)

py_binary(
    name = "status_processor",
    srcs = ["main.py"], 
    main = "main.py",
    deps = [":manman_host"],
    args = ["start-status-processor"],
    visibility = ["//manman:__pkg__"],
)

py_binary(
    name = "migration",
    srcs = ["main.py"],
    main = "main.py",
    deps = [":manman_host"],
    args = ["run-migration"],
    visibility = ["//manman:__pkg__"],
)

# Tests for host APIs
py_test(
    name = "manman_host_test",
    srcs = [
        "experience_api_test.py",
        "status_api_test.py", 
        "status_processor_test.py",
        "worker_dal_api_test.py",
    ],
    main = "experience_api_test.py",
    deps = [
        ":manman_host",
        "@pypi//:pytest",
        "@pypi//:pytest-asyncio",
        "@pypi//:httpx",  # For testing FastAPI endpoints
        "@pypi//:requests",  # For repository API client
    ],
    python_version = "PY3",
)

# OpenAPI Spec Generation
# Generate OpenAPI specifications for each API using the openapi_gen tool
genrule(
    name = "experience_api_spec",
    outs = ["experience-api.json"],
    cmd = """
        $(location //libs/python/openapi_gen:openapi_gen) experience-api --output-dir $(@D)
    """,
    tools = ["//libs/python/openapi_gen:openapi_gen"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "status_api_spec",
    outs = ["status-api.json"],
    cmd = """
        $(location //libs/python/openapi_gen:openapi_gen) status-api --output-dir $(@D)
    """,
    tools = ["//libs/python/openapi_gen:openapi_gen"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "worker_dal_api_spec",
    outs = ["worker-dal-api.json"],
    cmd = """
        $(location //libs/python/openapi_gen:openapi_gen) worker-dal-api --output-dir $(@D)
    """,
    tools = ["//libs/python/openapi_gen:openapi_gen"],
    visibility = ["//visibility:public"],
)

# Generate all API specs at once
filegroup(
    name = "all_api_specs",
    srcs = [
        ":experience_api_spec",
        ":status_api_spec",
        ":worker_dal_api_spec",
    ],
    visibility = ["//visibility:public"],
)

# ==============================================================================
# OpenAPI Client Generation
# ==============================================================================
# Generate Python clients for ManMan APIs
# Clients are generated in external/manman/{api}/ structure
# Import pattern: from external.manman.{api} import ...

openapi_client(
    name = "experience_api_client",
    spec = ":experience_api_spec",
    namespace = "manman",
    app = "experience_api",
    visibility = ["//visibility:public"],
)

openapi_client(
    name = "status_api_client",
    spec = ":status_api_spec",
    namespace = "manman",
    app = "status_api",
    visibility = ["//visibility:public"],
)

openapi_client(
    name = "worker_dal_api_client",
    spec = ":worker_dal_api_spec",
    namespace = "manman",
    app = "worker_dal_api",
    visibility = ["//visibility:public"],
)

# Convenience target to build all ManMan API clients
filegroup(
    name = "all_api_clients",
    srcs = [
        ":experience_api_client",
        ":status_api_client",
        ":worker_dal_api_client",
    ],
    visibility = ["//visibility:public"],
)