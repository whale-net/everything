# ManMan Tiltfile
# Local development environment for the ManMan application

load('ext://namespace', 'namespace_create')
load('ext://dotenv', 'dotenv')
load('../tools/tilt/common.tilt', 
     'bazel_build_image', 'detect_platform', 'get_bazel_platform', 'get_watch_paths',
     'setup_dev_util', 'setup_postgres', 'setup_rabbitmq', 'setup_otelcollector',
     'setup_nginx_ingress', 'get_env_bool', 'get_custom_or_default',
     'print_startup_banner', 'print_service_info')

# ===========================
# Configuration
# ===========================

namespace = 'manman-local-dev'
namespace_create(namespace)
dotenv()

platform = detect_platform()
bazel_platform = get_bazel_platform(platform)

print_startup_banner("ManMan", namespace, platform)

# ===========================
# Infrastructure Setup
# ===========================

setup_dev_util(namespace)

# Nginx Ingress Controller
setup_nginx_ingress(ingress_class='manman-nginx', http_port=30080, https_port=30443)

# PostgreSQL Database
db_url_default = setup_postgres(namespace, db_name='manman')
db_url = get_custom_or_default('BUILD_POSTGRES_ENV', 'POSTGRES_URL', db_url_default)

# RabbitMQ Message Queue
rmq_default = setup_rabbitmq(namespace)
rabbitmq_host = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_HOST', rmq_default['host'])
rabbitmq_port = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PORT', rmq_default['port'])
rabbitmq_user = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_USER', rmq_default['user'])
rabbitmq_password = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PASSWORD', rmq_default['password'])

# OpenTelemetry Collector
setup_otelcollector(namespace)

print("üìä Infrastructure configured:")
print("  Postgres:  {}".format("custom" if os.environ.get('BUILD_POSTGRES_ENV') == 'custom' else "local"))
print("  RabbitMQ:  {}".format("custom" if os.environ.get('BUILD_RABBITMQ_ENV') == 'custom' else "local"))

# ===========================
# Application Configuration
# ===========================

# Get watch paths for all manman apps
watch_paths = get_watch_paths('manman')

# Define all ManMan apps with their metadata
# This structure mirrors the release_app() definitions in BUILD.bazel
APPS = {
    'experience-api': {
        'enabled_env': 'ENABLE_EXPERIENCE_API',
        'bazel_target': '//manman:experience-api_image_load',
        'image_name': 'manman-experience-api',
    },
    'worker-dal-api': {
        'enabled_env': 'ENABLE_WORKER_DAL_API',
        'bazel_target': '//manman:worker-dal-api_image_load',
        'image_name': 'manman-worker-dal-api',
    },
    'status-api': {
        'enabled_env': 'ENABLE_STATUS_API',
        'bazel_target': '//manman:status-api_image_load',
        'image_name': 'manman-status-api',
    },
    'status-processor': {
        'enabled_env': 'ENABLE_STATUS_PROCESSOR',
        'bazel_target': '//manman:status-processor_image_load',
        'image_name': 'manman-status-processor',
    },
    'migration': {
        'enabled_env': 'ENABLE_MIGRATION',
        'bazel_target': '//manman:migration_image_load',
        'image_name': 'manman-migration',
    },
}

# ===========================
# Bazel Image Building
# ===========================

print("\nüèóÔ∏è  Building images:")
for app_name, config in APPS.items():
    if get_env_bool(config['enabled_env'], default='true'):
        print("  ‚úì {}".format(config['image_name']))
        bazel_build_image(
            config['image_name'],
            watch_paths,
            config['bazel_target'],
            platform=platform
        )
    else:
        print("  ‚úó {} (disabled)".format(config['image_name']))

# ===========================
# Helm Deployment
# ===========================

# Build the Helm chart using Bazel
local('bazel build //manman:manman_chart')

chart_path = '../bazel-bin/manman/helm-manman-host-services_chart/manman-host-services'

# Build helm set arguments
helm_set_args = [
    'global.environment=dev',
    'global.domain=manman',
    'global.namespace={}'.format(namespace),
    # Ingress configuration
    'ingressDefaults.enabled=true',
    'ingressDefaults.className=manman-nginx',
]

# Configure images and environment for enabled apps
for app_name, config in APPS.items():
    if get_env_bool(config['enabled_env'], default='true'):
        app_key = 'manman-{}'.format(app_name)
        helm_set_args.extend([
            # Image configuration
            'apps.{}.image={}'.format(app_key, config['image_name']),
            'apps.{}.imageTag=latest'.format(app_key),
            # Database configuration
            'apps.{}.env.POSTGRES_URL={}'.format(app_key, db_url),
            # RabbitMQ configuration (skip for migration job)
            'apps.{}.env.RABBITMQ_HOST={}'.format(app_key, rabbitmq_host),
            'apps.{}.env.RABBITMQ_PORT={}'.format(app_key, rabbitmq_port),
            'apps.{}.env.RABBITMQ_USER={}'.format(app_key, rabbitmq_user),
            'apps.{}.env.RABBITMQ_PASSWORD={}'.format(app_key, rabbitmq_password),
        ])

# Disable TLS for local development (only for external-api apps)
helm_set_args.extend([
    'apps.manman-experience-api.ingress.tlsEnabled=false',
    'apps.manman-worker-dal-api.ingress.tlsEnabled=false',
])

# Build the helm set arguments as a single string
helm_set_string = ' '.join(['--set {}'.format(arg) for arg in helm_set_args])

print("\nüî® Deploying with Helm...")
print("   Chart:     {}".format(chart_path))
print("   Namespace: {}".format(namespace))

# Generate YAML using local() to force re-evaluation
yaml_content = local('helm template manman-host {} --namespace {} {}'.format(
    chart_path,
    namespace,
    helm_set_string
))

k8s_yaml(yaml_content)

# ===========================
# Access Information
# ===========================

services = {}

# API endpoints (accessible via ingress)
if get_env_bool('ENABLE_EXPERIENCE_API', default='true'):
    services['Experience API (via curl)'] = 'curl -H "Host: experience.manman.local" http://localhost:30080/docs'

if get_env_bool('ENABLE_WORKER_DAL_API', default='true'):
    services['Worker DAL API (via curl)'] = 'curl -H "Host: dal.manman.local" http://localhost:30080/docs'

# Infrastructure
services['PostgreSQL'] = 'localhost:5432 (user: postgres, pass: password)'
services['RabbitMQ'] = 'localhost:5672 (user: rabbit, pass: password)'
services['RabbitMQ Management'] = 'http://localhost:15672'

print_service_info("üì° Access Information", services)

print("\nüìù Useful Commands:")
print("   Run migrations:     uv run --directory manman host run-migration")
print("   Create migration:   uv run --directory manman host create-migration")

print("\nüí° Configuration Tips:")
print("   - Use .env file for environment variables")
print("   - Set BUILD_POSTGRES_ENV=custom for external postgres")
print("   - Set BUILD_RABBITMQ_ENV=custom for external rabbitmq")
print("   - Set ENABLE_<SERVICE>=false to disable services")
print("   - Run 'tilt down' to stop all services")

print("\n" + "="*60 + "\n")
