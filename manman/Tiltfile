# ManMan Tiltfile
# Local development environment for the ManMan application

load('ext://namespace', 'namespace_create')
load('ext://dotenv', 'dotenv')
load('../tools/tilt/common.tilt', 
     'bazel_build_image', 'detect_platform', 'get_bazel_platform', 'get_watch_paths',
     'setup_dev_util', 'setup_postgres', 'setup_rabbitmq', 'setup_otelcollector',
     'setup_nginx_ingress', 'deploy_helm_chart', 'get_env_bool', 'get_custom_or_default',
     'print_startup_banner', 'print_service_info')

# ===========================
# Configuration
# ===========================

namespace = 'manman-local-dev'
namespace_create(namespace)
dotenv()

platform = detect_platform()
bazel_platform = get_bazel_platform(platform)

print_startup_banner("ManMan", namespace, platform)

# ===========================
# Infrastructure Setup
# ===========================

setup_dev_util(namespace)

# Nginx Ingress Controller
setup_nginx_ingress(ingress_class='manman-nginx', http_port=30080, https_port=30443)

# PostgreSQL Database
db_url_default = setup_postgres(namespace, db_name='manman')
db_url = get_custom_or_default('BUILD_POSTGRES_ENV', 'POSTGRES_URL', db_url_default)

# RabbitMQ Message Queue
rmq_default = setup_rabbitmq(namespace)
rabbitmq_host = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_HOST', rmq_default['host'])
rabbitmq_port = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PORT', rmq_default['port'])
rabbitmq_user = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_USER', rmq_default['user'])
rabbitmq_password = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PASSWORD', rmq_default['password'])

# OpenTelemetry Collector
setup_otelcollector(namespace)

print("üìä Infrastructure configured:")
print("  Postgres:  {}".format("custom" if os.environ.get('BUILD_POSTGRES_ENV') == 'custom' else "local"))
print("  RabbitMQ:  {}".format("custom" if os.environ.get('BUILD_RABBITMQ_ENV') == 'custom' else "local"))

# ===========================
# Application Configuration
# ===========================

# Get watch paths for all manman apps
watch_paths = get_watch_paths('manman')

# Define all ManMan apps with their metadata
# This structure mirrors the release_app() definitions in BUILD.bazel
APPS = {
    'experience-api': {
        'enabled_env': 'ENABLE_EXPERIENCE_API',
        'bazel_target': '//manman:experience-api_image_load',
        'image_name': 'manman-experience-api',
    },
    'worker-dal-api': {
        'enabled_env': 'ENABLE_WORKER_DAL_API',
        'bazel_target': '//manman:worker-dal-api_image_load',
        'image_name': 'manman-worker-dal-api',
    },
    'status-api': {
        'enabled_env': 'ENABLE_STATUS_API',
        'bazel_target': '//manman:status-api_image_load',
        'image_name': 'manman-status-api',
    },
    'status-processor': {
        'enabled_env': 'ENABLE_STATUS_PROCESSOR',
        'bazel_target': '//manman:status-processor_image_load',
        'image_name': 'manman-status-processor',
    },
    'migration': {
        'enabled_env': 'ENABLE_MIGRATION',
        'bazel_target': '//manman:migration_image_load',
        'image_name': 'manman-migration',
    },
}

# ===========================
# Bazel Image Building
# ===========================

print("\nüèóÔ∏è  Building images:")
for app_name, config in APPS.items():
    if get_env_bool(config['enabled_env'], default='true'):
        print("  ‚úì {}".format(config['image_name']))
        bazel_build_image(
            config['image_name'],
            watch_paths,
            config['bazel_target'],
            platform=platform
        )
    else:
        print("  ‚úó {} (disabled)".format(config['image_name']))

# ===========================
# Helm Deployment
# ===========================

# Build apps configuration for helm deployment
apps_config = {}

for app_name, config in APPS.items():
    app_key = 'manman-{}'.format(app_name)
    
    # Build environment variables
    env_vars = {
        'POSTGRES_URL': db_url,
    }
    
    # Add RabbitMQ config for non-migration apps
    if app_name != 'migration':
        env_vars.update({
            'RABBITMQ_HOST': rabbitmq_host,
            'RABBITMQ_PORT': rabbitmq_port,
            'RABBITMQ_USER': rabbitmq_user,
            'RABBITMQ_PASSWORD': rabbitmq_password,
        })
    
    apps_config[app_name] = {
        'enabled_env': config['enabled_env'],
        'image_name': config['image_name'],
        'helm_key': app_key,
        'env': env_vars,
        'helm_config': {},
    }

# Disable TLS for ingress-exposed apps in local development
apps_config['experience-api']['helm_config']['ingress.tlsEnabled'] = 'false'
apps_config['worker-dal-api']['helm_config']['ingress.tlsEnabled'] = 'false'

# Deploy the helm chart
deploy_helm_chart(
    'manman',
    namespace,
    '//manman:manman_chart',
    'manman-host-services',
    apps_config,
    global_config={
        'ingressDefaults.enabled': 'true',
        'ingressDefaults.className': 'manman-nginx',
    }
)

# ===========================
# Access Information
# ===========================

services = {}

# API endpoints (accessible via ingress)
if get_env_bool('ENABLE_EXPERIENCE_API', default='true'):
    services['Experience API (via curl)'] = 'curl -H "Host: experience.manman.local" http://localhost:30080/docs'

if get_env_bool('ENABLE_WORKER_DAL_API', default='true'):
    services['Worker DAL API (via curl)'] = 'curl -H "Host: dal.manman.local" http://localhost:30080/docs'

# Infrastructure
services['PostgreSQL'] = 'localhost:5432 (user: postgres, pass: password)'
services['RabbitMQ'] = 'localhost:5672 (user: rabbit, pass: password)'
services['RabbitMQ Management'] = 'http://localhost:15672'

print_service_info("üì° Access Information", services)

print("\nüìù Useful Commands:")
print("   Run migrations:     uv run --directory manman host run-migration")
print("   Create migration:   uv run --directory manman host create-migration")

print("\nüí° Configuration Tips:")
print("   - Use .env file for environment variables")
print("   - Set BUILD_POSTGRES_ENV=custom for external postgres")
print("   - Set BUILD_RABBITMQ_ENV=custom for external rabbitmq")
print("   - Set ENABLE_<SERVICE>=false to disable services")
print("   - Run 'tilt down' to stop all services")

print("\n" + "="*60 + "\n")
