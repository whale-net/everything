# ManMan Tiltfile
# Local development environment for the ManMan application
#
# This Tiltfile demonstrates how to use Bazel-based builds with Tilt
# for the Everything monorepo structure.

load('ext://namespace', 'namespace_create')
load('ext://dotenv', 'dotenv')
load('ext://helm_resource', 'helm_resource', 'helm_repo')

# Configuration
namespace = 'manman-local-dev'
namespace_create(namespace)

# Load environment variables
dotenv()

# Print configuration
print("üê≥ ManMan - Local Development Environment")
print("üì¶ Namespace:", namespace)
print("üîß Using local Bazel-built images")

# ===========================
# Configuration from ENV
# ===========================

app_env = os.environ.get('APP_ENV', 'dev')
build_postgres_env = os.environ.get('MANMAN_BUILD_POSTGRES_ENV', 'default')
build_rabbitmq_env = os.environ.get('MANMAN_BUILD_RABBITMQ_ENV', 'default')

print("App Environment:", app_env)
print("Postgres Build Environment:", build_postgres_env)
print("RabbitMQ Build Environment:", build_rabbitmq_env)

# ===========================
# Infrastructure Setup
# ===========================

# Setup dev-util helm repository
helm_repo('dev-util', 'https://whale-net.github.io/dev-util')

# Nginx Ingress Controller
helm_repo('ingress-nginx', 'https://kubernetes.github.io/ingress-nginx')
helm_resource('manman-nginx-ingress', 'ingress-nginx/ingress-nginx',
    namespace='ingress-nginx',
    flags=[
        '--create-namespace',
        '--set=controller.service.type=NodePort',
        '--set=controller.hostPort.enabled=true',
        '--set=controller.service.nodePorts.http=30080',
        '--set=controller.service.nodePorts.https=30443',
        '--set=controller.admissionWebhooks.enabled=false',
        '--set=controller.ingressClassResource.name=manman-nginx',
        '--set=controller.ingressClass=manman-nginx'
    ]
)

# PostgreSQL Database
helm_resource('postgres-dev', 'dev-util/postgres-dev',
    resource_deps=['dev-util'],
    flags=[
        '--set=postgresDB=manman',
        '--set=namespace={}'.format(namespace)
    ]
)
k8s_resource(workload='postgres-dev', port_forwards='5432:5432')

# RabbitMQ Message Queue
helm_resource('rabbitmq-dev', 'dev-util/rabbitmq-dev',
    resource_deps=['dev-util'],
    flags=['--set=namespace={}'.format(namespace)]
)
k8s_resource(workload='rabbitmq-dev', port_forwards='5672:5672')
k8s_resource(workload='rabbitmq-dev', port_forwards='15672:15672')

# OpenTelemetry Collector
helm_resource('otelcollector-dev', 'dev-util/otelcollector-dev',
    resource_deps=['dev-util'],
    flags=['--set=namespace={}'.format(namespace)]
)

# ===========================
# Database Configuration
# ===========================

db_url_default = 'postgresql+psycopg2://postgres:password@postgres-dev.{}.svc.cluster.local:5432/manman'.format(namespace)
db_url = db_url_default

if build_postgres_env == 'custom':
    db_url = os.environ.get('MANMAN_POSTGRES_URL', db_url_default)

# ===========================
# RabbitMQ Configuration
# ===========================

rabbitmq_host_default = 'rabbitmq-dev.{}.svc.cluster.local'.format(namespace)
rabbitmq_port_default = '5672'
rabbitmq_user_default = 'rabbit'
rabbitmq_password_default = 'password'

# Initialize with defaults
rabbitmq_host = rabbitmq_host_default
rabbitmq_port = rabbitmq_port_default
rabbitmq_user = rabbitmq_user_default
rabbitmq_password = rabbitmq_password_default

if build_rabbitmq_env == 'custom':
    rabbitmq_host = os.environ.get('MANMAN_RABBITMQ_HOST', rabbitmq_host_default)
    rabbitmq_port = os.environ.get('MANMAN_RABBITMQ_PORT', rabbitmq_port_default)
    rabbitmq_user = os.environ.get('MANMAN_RABBITMQ_USER', rabbitmq_user_default)
    rabbitmq_password = os.environ.get('MANMAN_RABBITMQ_PASSWORD', rabbitmq_password_default)

# ===========================
# Feature Flags
# ===========================

enable_experience_api = os.environ.get('MANMAN_ENABLE_EXPERIENCE_API', 'true').lower() == 'true'
enable_worker_dal_api = os.environ.get('MANMAN_ENABLE_WORKER_DAL_API', 'true').lower() == 'true'
enable_status_api = os.environ.get('MANMAN_ENABLE_STATUS_API', 'true').lower() == 'true'
enable_status_processor = os.environ.get('MANMAN_ENABLE_STATUS_PROCESSOR', 'true').lower() == 'true'
enable_migration = os.environ.get('MANMAN_ENABLE_MIGRATION', 'true').lower() == 'true'
enable_otel_logging = os.environ.get('MANMAN_ENABLE_OTEL_LOGGING', 'true').lower() == 'true'

print("Feature flags:")
print("  Experience API:", enable_experience_api)
print("  Worker DAL API:", enable_worker_dal_api)
print("  Status API:", enable_status_api)
print("  Status Processor:", enable_status_processor)
print("  Migration:", enable_migration)
print("  OTEL Logging:", enable_otel_logging)

# ===========================
# Bazel Image Building
# ===========================

# Detect platform (M1/M2 Macs need arm64, Intel needs amd64)
# Use Tilt's local() to run a command and get the architecture
arch = str(local('uname -m')).strip()
platform = 'linux/arm64' if arch == 'arm64' else 'linux/amd64'
bazel_platform = '//tools:linux_arm64' if platform == 'linux/arm64' else '//tools:linux_x86_64'

print("üèóÔ∏è  Building for platform:", platform, "(detected:", arch, ")")
print("üéØ Bazel platform:", bazel_platform)

# ===========================
# Bazel Image Building
# ===========================

# Build ManMan images using Bazel with proper cross-compilation
# Each service has its own release_app() in manman/BUILD.bazel

# Experience API
if enable_experience_api:
    custom_build(
        'manman-experience-api',
        'bazel run //manman:experience-api_image_load --platforms={} && docker tag manman-experience-api:latest $EXPECTED_REF'.format(bazel_platform),
        ['./src'],
        skips_local_docker=False,
        disable_push=True,
    )

# Worker DAL API
if enable_worker_dal_api:
    custom_build(
        'manman-worker-dal-api',
        'bazel run //manman:worker-dal-api_image_load --platforms={} && docker tag manman-worker-dal-api:latest $EXPECTED_REF'.format(bazel_platform),
        ['./src'],
        skips_local_docker=False,
        disable_push=True,
    )

# Status API
if enable_status_api:
    custom_build(
        'manman-status-api',
        'bazel run //manman:status-api_image_load --platforms={} && docker tag manman-status-api:latest $EXPECTED_REF'.format(bazel_platform),
        ['./src'],
        skips_local_docker=False,
        disable_push=True,
    )

# Status Processor
if enable_status_processor:
    custom_build(
        'manman-status-processor',
        'bazel run //manman:status-processor_image_load --platforms={} && docker tag manman-status-processor:latest $EXPECTED_REF'.format(bazel_platform),
        ['./src'],
        skips_local_docker=False,
        disable_push=True,
    )

# Migration Job
if enable_migration:
    custom_build(
        'manman-migration',
        'bazel run //manman:migration_image_load --platforms={} && docker tag manman-migration:latest $EXPECTED_REF'.format(bazel_platform),
        ['./src'],
        skips_local_docker=False,
        disable_push=True,
    )

# ===========================
# Helm Deployment
# ===========================

# Build the Helm chart using Bazel
# This generates the chart from the release_helm_chart rule in manman/BUILD.bazel
local('bazel build //manman:manman_chart')

# The chart directory is always named helm-<domain>-<chart_name>_chart/<domain>-<chart_name>
# For manman with chart_name "host-services", it's helm-manman-host-services_chart/manman-host-services
# Path is relative to workspace root
chart_path = '../bazel-bin/manman/helm-manman-host-services_chart/manman-host-services'

helm_set_args = [
    'global.environment=dev',
    'global.domain=manman',
    'global.namespace={}'.format(namespace),
    # Override image names for each app (Tilt builds these)
    'apps.manman-experience-api.image=manman-experience-api',
    'apps.manman-experience-api.imageTag=latest',
    'apps.manman-worker-dal-api.image=manman-worker-dal-api',
    'apps.manman-worker-dal-api.imageTag=latest',
    'apps.manman-status-api.image=manman-status-api',
    'apps.manman-status-api.imageTag=latest',
    'apps.manman-status-processor.image=manman-status-processor',
    'apps.manman-status-processor.imageTag=latest',
    'apps.manman-migration.image=manman-migration',
    'apps.manman-migration.imageTag=latest',
    # Database configuration
    'apps.manman-experience-api.env.MANMAN_POSTGRES_URL={}'.format(db_url),
    'apps.manman-worker-dal-api.env.MANMAN_POSTGRES_URL={}'.format(db_url),
    'apps.manman-status-api.env.MANMAN_POSTGRES_URL={}'.format(db_url),
    'apps.manman-status-processor.env.MANMAN_POSTGRES_URL={}'.format(db_url),
    'apps.manman-migration.env.MANMAN_POSTGRES_URL={}'.format(db_url),
    # RabbitMQ configuration
    'apps.manman-experience-api.env.MANMAN_RABBITMQ_HOST={}'.format(rabbitmq_host),
    'apps.manman-experience-api.env.MANMAN_RABBITMQ_PORT={}'.format(rabbitmq_port),
    'apps.manman-experience-api.env.MANMAN_RABBITMQ_USER={}'.format(rabbitmq_user),
    'apps.manman-experience-api.env.MANMAN_RABBITMQ_PASSWORD={}'.format(rabbitmq_password),
    'apps.manman-worker-dal-api.env.MANMAN_RABBITMQ_HOST={}'.format(rabbitmq_host),
    'apps.manman-worker-dal-api.env.MANMAN_RABBITMQ_PORT={}'.format(rabbitmq_port),
    'apps.manman-worker-dal-api.env.MANMAN_RABBITMQ_USER={}'.format(rabbitmq_user),
    'apps.manman-worker-dal-api.env.MANMAN_RABBITMQ_PASSWORD={}'.format(rabbitmq_password),
    'apps.manman-status-api.env.MANMAN_RABBITMQ_HOST={}'.format(rabbitmq_host),
    'apps.manman-status-api.env.MANMAN_RABBITMQ_PORT={}'.format(rabbitmq_port),
    'apps.manman-status-api.env.MANMAN_RABBITMQ_USER={}'.format(rabbitmq_user),
    'apps.manman-status-api.env.MANMAN_RABBITMQ_PASSWORD={}'.format(rabbitmq_password),
    'apps.manman-status-processor.env.MANMAN_RABBITMQ_HOST={}'.format(rabbitmq_host),
    'apps.manman-status-processor.env.MANMAN_RABBITMQ_PORT={}'.format(rabbitmq_port),
    'apps.manman-status-processor.env.MANMAN_RABBITMQ_USER={}'.format(rabbitmq_user),
    'apps.manman-status-processor.env.MANMAN_RABBITMQ_PASSWORD={}'.format(rabbitmq_password),
]

# Build the helm set arguments as a single string for local() command
helm_set_string = ' '.join(['--set {}'.format(arg) for arg in helm_set_args])

print("üî® Generating Kubernetes manifests with local images...")
print("   Chart path:", chart_path)
print("   Namespace:", namespace)

# Generate YAML using local() to force re-evaluation
yaml_content = local('helm template manman-host {} --namespace {} {}'.format(
    chart_path,
    namespace,
    helm_set_string
))

k8s_yaml(yaml_content)

# ===========================
# Access Information
# ===========================

print("\n" + "="*60)
print("üöÄ ManMan Development Environment Ready!")
print("="*60)
print("\nüì° Access URLs (after 'tilt up'):")
print("   Ingress Controller: http://localhost:30080")

if enable_experience_api:
    print("   Experience API:     http://localhost:30080/experience/")
if enable_worker_dal_api:
    print("   Worker DAL API:     http://localhost:30080/workerdal/")
if enable_status_api:
    print("   Status API:         http://localhost:30080/status/")

print("\nüîß Infrastructure:")
print("   PostgreSQL:         localhost:5432 (user: postgres, pass: password)")
print("   RabbitMQ:           localhost:5672 (user: rabbit, pass: password)")
print("   RabbitMQ Mgmt UI:   http://localhost:15672")

print("\nüìù Useful Commands:")
print("   Run migrations:     uv run --directory manman host run-migration")
print("   Create migration:   uv run --directory manman host create-migration")
print("   Open RabbitMQ UI:   open http://localhost:15672")

print("\nüí° Tips:")
print("   - Set MANMAN_BUILD_POSTGRES_ENV=custom to use external postgres")
print("   - Set MANMAN_BUILD_RABBITMQ_ENV=custom to use external rabbitmq")
print("   - Disable services with MANMAN_ENABLE_<SERVICE>=false")
print("   - Run 'tilt down' to stop all services")

print("\n" + "="*60 + "\n")
