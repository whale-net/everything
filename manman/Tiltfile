# ManMan Tiltfile
# Local development environment for the ManMan application

load('ext://namespace', 'namespace_create')
load('ext://dotenv', 'dotenv')
load('../tools/tilt/common.tilt', 
     'build_images_from_apps', 'detect_platform', 'get_bazel_platform', 'get_watch_paths',
     'setup_dev_util', 'setup_postgres', 'setup_rabbitmq', 'setup_otelcollector',
     'setup_nginx_ingress', 'build_apps_config', 'deploy_helm_chart',
     'get_env_bool', 'get_custom_or_default',
     'print_startup_banner', 'print_service_info', 'print_access_info', 'print_footer_info')

# ===========================
# Configuration
# ===========================

namespace = 'manman-local-dev'
namespace_create(namespace)
dotenv()

platform = detect_platform()
bazel_platform = get_bazel_platform(platform)

print_startup_banner("ManMan", namespace, platform)

# ===========================
# Infrastructure Setup
# ===========================

setup_dev_util(namespace)

# Nginx Ingress Controller
setup_nginx_ingress(ingress_class='manman-nginx', http_port=30080, https_port=30443)

# PostgreSQL Database
db_info = setup_postgres(namespace, db_name='manman')
db_url = get_custom_or_default('BUILD_POSTGRES_ENV', 'POSTGRES_URL', db_info['url'])

# RabbitMQ Message Queue
rmq_info = setup_rabbitmq(namespace)
rabbitmq_host = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_HOST', rmq_info['host'])
rabbitmq_port = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PORT', rmq_info['port'])
rabbitmq_user = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_USER', rmq_info['user'])
rabbitmq_password = get_custom_or_default('BUILD_RABBITMQ_ENV', 'RABBITMQ_PASSWORD', rmq_info['password'])

# OpenTelemetry Collector
otel_endpoint = setup_otelcollector(namespace)

print("ðŸ“Š Infrastructure configured:")
print("  Postgres:  {}".format("custom" if os.environ.get('BUILD_POSTGRES_ENV') == 'custom' else "local"))
print("  RabbitMQ:  {}".format("custom" if os.environ.get('BUILD_RABBITMQ_ENV') == 'custom' else "local"))
print("  OTEL:      {}".format(otel_endpoint))

# ===========================
# Application Configuration
# ===========================

# Get watch paths for all manman apps
watch_paths = get_watch_paths('manman')

# Define all ManMan apps with their metadata
# This structure mirrors the release_app() definitions in BUILD.bazel
APPS = {
    'experience-api': {
        'enabled_env': 'ENABLE_EXPERIENCE_API',
        'bazel_target': '//manman:experience-api_image_load',
        'image_name': 'manman-experience-api',
    },
    'worker-dal-api': {
        'enabled_env': 'ENABLE_WORKER_DAL_API',
        'bazel_target': '//manman:worker-dal-api_image_load',
        'image_name': 'manman-worker-dal-api',
    },
    'status-api': {
        'enabled_env': 'ENABLE_STATUS_API',
        'bazel_target': '//manman:status-api_image_load',
        'image_name': 'manman-status-api',
    },
    'status-processor': {
        'enabled_env': 'ENABLE_STATUS_PROCESSOR',
        'bazel_target': '//manman:status-processor_image_load',
        'image_name': 'manman-status-processor',
    },
    'management-ui': {
        'enabled_env': 'ENABLE_MANAGEMENT_UI',
        'bazel_target': '//manman:management-ui_image_load',
        'image_name': 'manman-management-ui',
    },
    'migration': {
        'enabled_env': 'ENABLE_MIGRATION',
        'bazel_target': '//manman:migration_image_load',
        'image_name': 'manman-migration',
    },
}

# ===========================
# Bazel Image Building
# ===========================

build_images_from_apps(APPS, watch_paths, platform)

# ===========================
# Helm Deployment
# ===========================

# Build apps configuration with infrastructure settings
apps_config = build_apps_config(
    APPS,
    'manman',
    env_vars={
        'POSTGRES_URL': db_url,
        'RABBITMQ_HOST': rabbitmq_host,
        'RABBITMQ_PORT': rabbitmq_port,
        'RABBITMQ_USER': rabbitmq_user,
        'RABBITMQ_PASSWORD': rabbitmq_password,
        'RABBITMQ_VHOST': 'manman-dev',  # Environment-specific vhost (dev, staging, prod)
        # Logging configuration (applies to all apps by default)
        # Individual apps can override via their Helm values
        'LOG_OTLP': 'true',  # Enable OTLP logging in dev
        'LOG_LEVEL': 'DEBUG',  # Verbose logging for development
        'LOG_CONSOLE': 'true',  # Also log to console for visibility
        'LOG_JSON_FORMAT': 'false',  # Human-readable logs in dev
        # Note: Worker apps may want to override LOG_OTLP=false for console-only logging
    }
)

# Disable TLS for ingress-exposed apps in local development
apps_config['experience-api']['helm_config']['ingress.tlsEnabled'] = 'false'
apps_config['worker-dal-api']['helm_config']['ingress.tlsEnabled'] = 'false'
apps_config['management-ui']['helm_config']['ingress.tlsEnabled'] = 'false'

# Management UI configuration: use OIDC mode for authentication
if 'management-ui' in apps_config:
    if 'env_vars' not in apps_config['management-ui']:
        apps_config['management-ui']['env_vars'] = {}
    
    # Configure OIDC authentication
    apps_config['management-ui']['env_vars']['AUTH_MODE'] = 'oidc'
    apps_config['management-ui']['env_vars']['OIDC_ISSUER'] = os.environ.get('OIDC_ISSUER', '')
    apps_config['management-ui']['env_vars']['OIDC_CLIENT_ID'] = os.environ.get('OIDC_CLIENT_ID', '')
    apps_config['management-ui']['env_vars']['OIDC_CLIENT_SECRET'] = os.environ.get('OIDC_CLIENT_SECRET', '')
    apps_config['management-ui']['env_vars']['OIDC_REDIRECT_URI'] = os.environ.get('OIDC_REDIRECT_URI', 'http://management-ui.manman.local:30080/auth/callback')
    apps_config['management-ui']['env_vars']['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')
    
    # Validate required OIDC configuration
    if not apps_config['management-ui']['env_vars']['OIDC_ISSUER']:
        fail('OIDC_ISSUER environment variable is required for OIDC mode')
    if not apps_config['management-ui']['env_vars']['OIDC_CLIENT_ID']:
        fail('OIDC_CLIENT_ID environment variable is required for OIDC mode')
    if not apps_config['management-ui']['env_vars']['OIDC_CLIENT_SECRET']:
        fail('OIDC_CLIENT_SECRET environment variable is required for OIDC mode')

# Deploy the helm chart
deploy_helm_chart(
    'manman',
    namespace,
    '//manman:manman_chart',
    'manman-host-services',
    apps_config,
    global_config={
        'ingressDefaults.enabled': 'true',
        'ingressDefaults.className': 'manman-nginx',
        'otlp.endpoint': otel_endpoint,
    }
)

# ===========================
# Access Information
# ===========================

print_access_info(
    'manman',
    APPS,
    ingress_port=30080,
    additional_services={
        'PostgreSQL': db_info['service_info'],
        'RabbitMQ': rmq_info['service_info'],
        'RabbitMQ Management': rmq_info['mgmt_service_info'],
    }
)

print_footer_info('manman')
